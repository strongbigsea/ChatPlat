// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test.proto

#ifndef PROTOBUF_test_2eproto__INCLUDED
#define PROTOBUF_test_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace ssp {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_test_2eproto();
void protobuf_AssignDesc_test_2eproto();
void protobuf_ShutdownFile_test_2eproto();

class Test;
class Testlist;
class UserInfoBaseTest;

// ===================================================================

class Test : public ::google::protobuf::Message {
 public:
  Test();
  virtual ~Test();

  Test(const Test& from);

  inline Test& operator=(const Test& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Test& default_instance();

  void Swap(Test* other);

  // implements Message ----------------------------------------------

  Test* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Test& from);
  void MergeFrom(const Test& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 a = 1;
  inline bool has_a() const;
  inline void clear_a();
  static const int kAFieldNumber = 1;
  inline ::google::protobuf::int32 a() const;
  inline void set_a(::google::protobuf::int32 value);

  // optional int32 b = 2;
  inline bool has_b() const;
  inline void clear_b();
  static const int kBFieldNumber = 2;
  inline ::google::protobuf::int32 b() const;
  inline void set_b(::google::protobuf::int32 value);

  // optional int32 c = 3;
  inline bool has_c() const;
  inline void clear_c();
  static const int kCFieldNumber = 3;
  inline ::google::protobuf::int32 c() const;
  inline void set_c(::google::protobuf::int32 value);

  // optional string d = 4;
  inline bool has_d() const;
  inline void clear_d();
  static const int kDFieldNumber = 4;
  inline const ::std::string& d() const;
  inline void set_d(const ::std::string& value);
  inline void set_d(const char* value);
  inline void set_d(const char* value, size_t size);
  inline ::std::string* mutable_d();
  inline ::std::string* release_d();
  inline void set_allocated_d(::std::string* d);

  // @@protoc_insertion_point(class_scope:ssp.Test)
 private:
  inline void set_has_a();
  inline void clear_has_a();
  inline void set_has_b();
  inline void clear_has_b();
  inline void set_has_c();
  inline void clear_has_c();
  inline void set_has_d();
  inline void clear_has_d();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 a_;
  ::google::protobuf::int32 b_;
  ::std::string* d_;
  ::google::protobuf::int32 c_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_test_2eproto();
  friend void protobuf_AssignDesc_test_2eproto();
  friend void protobuf_ShutdownFile_test_2eproto();

  void InitAsDefaultInstance();
  static Test* default_instance_;
};
// -------------------------------------------------------------------

class Testlist : public ::google::protobuf::Message {
 public:
  Testlist();
  virtual ~Testlist();

  Testlist(const Testlist& from);

  inline Testlist& operator=(const Testlist& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Testlist& default_instance();

  void Swap(Testlist* other);

  // implements Message ----------------------------------------------

  Testlist* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Testlist& from);
  void MergeFrom(const Testlist& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 a = 1;
  inline bool has_a() const;
  inline void clear_a();
  static const int kAFieldNumber = 1;
  inline ::google::protobuf::int32 a() const;
  inline void set_a(::google::protobuf::int32 value);

  // repeated .ssp.Test tl = 2;
  inline int tl_size() const;
  inline void clear_tl();
  static const int kTlFieldNumber = 2;
  inline const ::ssp::Test& tl(int index) const;
  inline ::ssp::Test* mutable_tl(int index);
  inline ::ssp::Test* add_tl();
  inline const ::google::protobuf::RepeatedPtrField< ::ssp::Test >&
      tl() const;
  inline ::google::protobuf::RepeatedPtrField< ::ssp::Test >*
      mutable_tl();

  // @@protoc_insertion_point(class_scope:ssp.Testlist)
 private:
  inline void set_has_a();
  inline void clear_has_a();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::ssp::Test > tl_;
  ::google::protobuf::int32 a_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_test_2eproto();
  friend void protobuf_AssignDesc_test_2eproto();
  friend void protobuf_ShutdownFile_test_2eproto();

  void InitAsDefaultInstance();
  static Testlist* default_instance_;
};
// -------------------------------------------------------------------

class UserInfoBaseTest : public ::google::protobuf::Message {
 public:
  UserInfoBaseTest();
  virtual ~UserInfoBaseTest();

  UserInfoBaseTest(const UserInfoBaseTest& from);

  inline UserInfoBaseTest& operator=(const UserInfoBaseTest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserInfoBaseTest& default_instance();

  void Swap(UserInfoBaseTest* other);

  // implements Message ----------------------------------------------

  UserInfoBaseTest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserInfoBaseTest& from);
  void MergeFrom(const UserInfoBaseTest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 ver = 1;
  inline bool has_ver() const;
  inline void clear_ver();
  static const int kVerFieldNumber = 1;
  inline ::google::protobuf::uint32 ver() const;
  inline void set_ver(::google::protobuf::uint32 value);

  // optional uint32 user_id = 2;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // optional string user_name = 3;
  inline bool has_user_name() const;
  inline void clear_user_name();
  static const int kUserNameFieldNumber = 3;
  inline const ::std::string& user_name() const;
  inline void set_user_name(const ::std::string& value);
  inline void set_user_name(const char* value);
  inline void set_user_name(const char* value, size_t size);
  inline ::std::string* mutable_user_name();
  inline ::std::string* release_user_name();
  inline void set_allocated_user_name(::std::string* user_name);

  // optional string password = 4;
  inline bool has_password() const;
  inline void clear_password();
  static const int kPasswordFieldNumber = 4;
  inline const ::std::string& password() const;
  inline void set_password(const ::std::string& value);
  inline void set_password(const char* value);
  inline void set_password(const char* value, size_t size);
  inline ::std::string* mutable_password();
  inline ::std::string* release_password();
  inline void set_allocated_password(::std::string* password);

  // optional uint32 max_num = 33;
  inline bool has_max_num() const;
  inline void clear_max_num();
  static const int kMaxNumFieldNumber = 33;
  inline ::google::protobuf::uint32 max_num() const;
  inline void set_max_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ssp.UserInfoBaseTest)
 private:
  inline void set_has_ver();
  inline void clear_has_ver();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_user_name();
  inline void clear_has_user_name();
  inline void set_has_password();
  inline void clear_has_password();
  inline void set_has_max_num();
  inline void clear_has_max_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 ver_;
  ::google::protobuf::uint32 user_id_;
  ::std::string* user_name_;
  ::std::string* password_;
  ::google::protobuf::uint32 max_num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_test_2eproto();
  friend void protobuf_AssignDesc_test_2eproto();
  friend void protobuf_ShutdownFile_test_2eproto();

  void InitAsDefaultInstance();
  static UserInfoBaseTest* default_instance_;
};
// ===================================================================


// ===================================================================

// Test

// optional int32 a = 1;
inline bool Test::has_a() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Test::set_has_a() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Test::clear_has_a() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Test::clear_a() {
  a_ = 0;
  clear_has_a();
}
inline ::google::protobuf::int32 Test::a() const {
  return a_;
}
inline void Test::set_a(::google::protobuf::int32 value) {
  set_has_a();
  a_ = value;
}

// optional int32 b = 2;
inline bool Test::has_b() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Test::set_has_b() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Test::clear_has_b() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Test::clear_b() {
  b_ = 0;
  clear_has_b();
}
inline ::google::protobuf::int32 Test::b() const {
  return b_;
}
inline void Test::set_b(::google::protobuf::int32 value) {
  set_has_b();
  b_ = value;
}

// optional int32 c = 3;
inline bool Test::has_c() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Test::set_has_c() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Test::clear_has_c() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Test::clear_c() {
  c_ = 0;
  clear_has_c();
}
inline ::google::protobuf::int32 Test::c() const {
  return c_;
}
inline void Test::set_c(::google::protobuf::int32 value) {
  set_has_c();
  c_ = value;
}

// optional string d = 4;
inline bool Test::has_d() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Test::set_has_d() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Test::clear_has_d() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Test::clear_d() {
  if (d_ != &::google::protobuf::internal::kEmptyString) {
    d_->clear();
  }
  clear_has_d();
}
inline const ::std::string& Test::d() const {
  return *d_;
}
inline void Test::set_d(const ::std::string& value) {
  set_has_d();
  if (d_ == &::google::protobuf::internal::kEmptyString) {
    d_ = new ::std::string;
  }
  d_->assign(value);
}
inline void Test::set_d(const char* value) {
  set_has_d();
  if (d_ == &::google::protobuf::internal::kEmptyString) {
    d_ = new ::std::string;
  }
  d_->assign(value);
}
inline void Test::set_d(const char* value, size_t size) {
  set_has_d();
  if (d_ == &::google::protobuf::internal::kEmptyString) {
    d_ = new ::std::string;
  }
  d_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Test::mutable_d() {
  set_has_d();
  if (d_ == &::google::protobuf::internal::kEmptyString) {
    d_ = new ::std::string;
  }
  return d_;
}
inline ::std::string* Test::release_d() {
  clear_has_d();
  if (d_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = d_;
    d_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Test::set_allocated_d(::std::string* d) {
  if (d_ != &::google::protobuf::internal::kEmptyString) {
    delete d_;
  }
  if (d) {
    set_has_d();
    d_ = d;
  } else {
    clear_has_d();
    d_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Testlist

// optional int32 a = 1;
inline bool Testlist::has_a() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Testlist::set_has_a() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Testlist::clear_has_a() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Testlist::clear_a() {
  a_ = 0;
  clear_has_a();
}
inline ::google::protobuf::int32 Testlist::a() const {
  return a_;
}
inline void Testlist::set_a(::google::protobuf::int32 value) {
  set_has_a();
  a_ = value;
}

// repeated .ssp.Test tl = 2;
inline int Testlist::tl_size() const {
  return tl_.size();
}
inline void Testlist::clear_tl() {
  tl_.Clear();
}
inline const ::ssp::Test& Testlist::tl(int index) const {
  return tl_.Get(index);
}
inline ::ssp::Test* Testlist::mutable_tl(int index) {
  return tl_.Mutable(index);
}
inline ::ssp::Test* Testlist::add_tl() {
  return tl_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ssp::Test >&
Testlist::tl() const {
  return tl_;
}
inline ::google::protobuf::RepeatedPtrField< ::ssp::Test >*
Testlist::mutable_tl() {
  return &tl_;
}

// -------------------------------------------------------------------

// UserInfoBaseTest

// optional uint32 ver = 1;
inline bool UserInfoBaseTest::has_ver() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserInfoBaseTest::set_has_ver() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserInfoBaseTest::clear_has_ver() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserInfoBaseTest::clear_ver() {
  ver_ = 0u;
  clear_has_ver();
}
inline ::google::protobuf::uint32 UserInfoBaseTest::ver() const {
  return ver_;
}
inline void UserInfoBaseTest::set_ver(::google::protobuf::uint32 value) {
  set_has_ver();
  ver_ = value;
}

// optional uint32 user_id = 2;
inline bool UserInfoBaseTest::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserInfoBaseTest::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserInfoBaseTest::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserInfoBaseTest::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 UserInfoBaseTest::user_id() const {
  return user_id_;
}
inline void UserInfoBaseTest::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
}

// optional string user_name = 3;
inline bool UserInfoBaseTest::has_user_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserInfoBaseTest::set_has_user_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserInfoBaseTest::clear_has_user_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserInfoBaseTest::clear_user_name() {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    user_name_->clear();
  }
  clear_has_user_name();
}
inline const ::std::string& UserInfoBaseTest::user_name() const {
  return *user_name_;
}
inline void UserInfoBaseTest::set_user_name(const ::std::string& value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
}
inline void UserInfoBaseTest::set_user_name(const char* value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
}
inline void UserInfoBaseTest::set_user_name(const char* value, size_t size) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UserInfoBaseTest::mutable_user_name() {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  return user_name_;
}
inline ::std::string* UserInfoBaseTest::release_user_name() {
  clear_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_name_;
    user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void UserInfoBaseTest::set_allocated_user_name(::std::string* user_name) {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete user_name_;
  }
  if (user_name) {
    set_has_user_name();
    user_name_ = user_name;
  } else {
    clear_has_user_name();
    user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string password = 4;
inline bool UserInfoBaseTest::has_password() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserInfoBaseTest::set_has_password() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserInfoBaseTest::clear_has_password() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserInfoBaseTest::clear_password() {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    password_->clear();
  }
  clear_has_password();
}
inline const ::std::string& UserInfoBaseTest::password() const {
  return *password_;
}
inline void UserInfoBaseTest::set_password(const ::std::string& value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void UserInfoBaseTest::set_password(const char* value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void UserInfoBaseTest::set_password(const char* value, size_t size) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UserInfoBaseTest::mutable_password() {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  return password_;
}
inline ::std::string* UserInfoBaseTest::release_password() {
  clear_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = password_;
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void UserInfoBaseTest::set_allocated_password(::std::string* password) {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (password) {
    set_has_password();
    password_ = password;
  } else {
    clear_has_password();
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 max_num = 33;
inline bool UserInfoBaseTest::has_max_num() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UserInfoBaseTest::set_has_max_num() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UserInfoBaseTest::clear_has_max_num() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UserInfoBaseTest::clear_max_num() {
  max_num_ = 0u;
  clear_has_max_num();
}
inline ::google::protobuf::uint32 UserInfoBaseTest::max_num() const {
  return max_num_;
}
inline void UserInfoBaseTest::set_max_num(::google::protobuf::uint32 value) {
  set_has_max_num();
  max_num_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ssp

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_test_2eproto__INCLUDED
