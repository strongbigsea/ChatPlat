// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message_define.proto

#ifndef PROTOBUF_message_5fdefine_2eproto__INCLUDED
#define PROTOBUF_message_5fdefine_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace ssp {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_message_5fdefine_2eproto();
void protobuf_AssignDesc_message_5fdefine_2eproto();
void protobuf_ShutdownFile_message_5fdefine_2eproto();

class MsgHeader;
class RegReq;
class RegRsp;
class LoginReq;
class LoginRsp;
class LogoutReq;
class LogoutRsp;
class AddFriendReq;
class AddFriendRsp;
class DelFriendReq;
class DelFriendRsp;
class PublishMessageReq;
class PublishMessageRsp;
class GetMessageListReq;
class MessageItem;
class GetMessageListRsp;
class GetPhotoReq;
class GetPhotoRsp;
class CommonReq;
class CommonRsp;

// ===================================================================

class MsgHeader : public ::google::protobuf::Message {
 public:
  MsgHeader();
  virtual ~MsgHeader();

  MsgHeader(const MsgHeader& from);

  inline MsgHeader& operator=(const MsgHeader& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgHeader& default_instance();

  void Swap(MsgHeader* other);

  // implements Message ----------------------------------------------

  MsgHeader* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgHeader& from);
  void MergeFrom(const MsgHeader& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 ver = 1;
  inline bool has_ver() const;
  inline void clear_ver();
  static const int kVerFieldNumber = 1;
  inline ::google::protobuf::uint32 ver() const;
  inline void set_ver(::google::protobuf::uint32 value);

  // optional uint32 cmd_type = 2;
  inline bool has_cmd_type() const;
  inline void clear_cmd_type();
  static const int kCmdTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 cmd_type() const;
  inline void set_cmd_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ssp.MsgHeader)
 private:
  inline void set_has_ver();
  inline void clear_has_ver();
  inline void set_has_cmd_type();
  inline void clear_has_cmd_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 ver_;
  ::google::protobuf::uint32 cmd_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_message_5fdefine_2eproto();
  friend void protobuf_AssignDesc_message_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_message_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static MsgHeader* default_instance_;
};
// -------------------------------------------------------------------

class RegReq : public ::google::protobuf::Message {
 public:
  RegReq();
  virtual ~RegReq();

  RegReq(const RegReq& from);

  inline RegReq& operator=(const RegReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RegReq& default_instance();

  void Swap(RegReq* other);

  // implements Message ----------------------------------------------

  RegReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RegReq& from);
  void MergeFrom(const RegReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .ssp.MsgHeader header = 1;
  inline bool has_header() const;
  inline void clear_header();
  static const int kHeaderFieldNumber = 1;
  inline const ::ssp::MsgHeader& header() const;
  inline ::ssp::MsgHeader* mutable_header();
  inline ::ssp::MsgHeader* release_header();
  inline void set_allocated_header(::ssp::MsgHeader* header);

  // optional string user_name = 3;
  inline bool has_user_name() const;
  inline void clear_user_name();
  static const int kUserNameFieldNumber = 3;
  inline const ::std::string& user_name() const;
  inline void set_user_name(const ::std::string& value);
  inline void set_user_name(const char* value);
  inline void set_user_name(const char* value, size_t size);
  inline ::std::string* mutable_user_name();
  inline ::std::string* release_user_name();
  inline void set_allocated_user_name(::std::string* user_name);

  // optional string password = 4;
  inline bool has_password() const;
  inline void clear_password();
  static const int kPasswordFieldNumber = 4;
  inline const ::std::string& password() const;
  inline void set_password(const ::std::string& value);
  inline void set_password(const char* value);
  inline void set_password(const char* value, size_t size);
  inline ::std::string* mutable_password();
  inline ::std::string* release_password();
  inline void set_allocated_password(::std::string* password);

  // optional uint32 from = 5;
  inline bool has_from() const;
  inline void clear_from();
  static const int kFromFieldNumber = 5;
  inline ::google::protobuf::uint32 from() const;
  inline void set_from(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ssp.RegReq)
 private:
  inline void set_has_header();
  inline void clear_has_header();
  inline void set_has_user_name();
  inline void clear_has_user_name();
  inline void set_has_password();
  inline void clear_has_password();
  inline void set_has_from();
  inline void clear_has_from();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::ssp::MsgHeader* header_;
  ::std::string* user_name_;
  ::std::string* password_;
  ::google::protobuf::uint32 from_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_message_5fdefine_2eproto();
  friend void protobuf_AssignDesc_message_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_message_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static RegReq* default_instance_;
};
// -------------------------------------------------------------------

class RegRsp : public ::google::protobuf::Message {
 public:
  RegRsp();
  virtual ~RegRsp();

  RegRsp(const RegRsp& from);

  inline RegRsp& operator=(const RegRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RegRsp& default_instance();

  void Swap(RegRsp* other);

  // implements Message ----------------------------------------------

  RegRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RegRsp& from);
  void MergeFrom(const RegRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .ssp.MsgHeader header = 1;
  inline bool has_header() const;
  inline void clear_header();
  static const int kHeaderFieldNumber = 1;
  inline const ::ssp::MsgHeader& header() const;
  inline ::ssp::MsgHeader* mutable_header();
  inline ::ssp::MsgHeader* release_header();
  inline void set_allocated_header(::ssp::MsgHeader* header);

  // optional string user_name = 2;
  inline bool has_user_name() const;
  inline void clear_user_name();
  static const int kUserNameFieldNumber = 2;
  inline const ::std::string& user_name() const;
  inline void set_user_name(const ::std::string& value);
  inline void set_user_name(const char* value);
  inline void set_user_name(const char* value, size_t size);
  inline ::std::string* mutable_user_name();
  inline ::std::string* release_user_name();
  inline void set_allocated_user_name(::std::string* user_name);

  // optional uint32 ret = 3;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 3;
  inline ::google::protobuf::uint32 ret() const;
  inline void set_ret(::google::protobuf::uint32 value);

  // optional uint32 user_id = 4;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 4;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ssp.RegRsp)
 private:
  inline void set_has_header();
  inline void clear_has_header();
  inline void set_has_user_name();
  inline void clear_has_user_name();
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_user_id();
  inline void clear_has_user_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::ssp::MsgHeader* header_;
  ::std::string* user_name_;
  ::google::protobuf::uint32 ret_;
  ::google::protobuf::uint32 user_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_message_5fdefine_2eproto();
  friend void protobuf_AssignDesc_message_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_message_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static RegRsp* default_instance_;
};
// -------------------------------------------------------------------

class LoginReq : public ::google::protobuf::Message {
 public:
  LoginReq();
  virtual ~LoginReq();

  LoginReq(const LoginReq& from);

  inline LoginReq& operator=(const LoginReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginReq& default_instance();

  void Swap(LoginReq* other);

  // implements Message ----------------------------------------------

  LoginReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LoginReq& from);
  void MergeFrom(const LoginReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .ssp.MsgHeader header = 1;
  inline bool has_header() const;
  inline void clear_header();
  static const int kHeaderFieldNumber = 1;
  inline const ::ssp::MsgHeader& header() const;
  inline ::ssp::MsgHeader* mutable_header();
  inline ::ssp::MsgHeader* release_header();
  inline void set_allocated_header(::ssp::MsgHeader* header);

  // optional string user_name = 3;
  inline bool has_user_name() const;
  inline void clear_user_name();
  static const int kUserNameFieldNumber = 3;
  inline const ::std::string& user_name() const;
  inline void set_user_name(const ::std::string& value);
  inline void set_user_name(const char* value);
  inline void set_user_name(const char* value, size_t size);
  inline ::std::string* mutable_user_name();
  inline ::std::string* release_user_name();
  inline void set_allocated_user_name(::std::string* user_name);

  // optional string password = 4;
  inline bool has_password() const;
  inline void clear_password();
  static const int kPasswordFieldNumber = 4;
  inline const ::std::string& password() const;
  inline void set_password(const ::std::string& value);
  inline void set_password(const char* value);
  inline void set_password(const char* value, size_t size);
  inline ::std::string* mutable_password();
  inline ::std::string* release_password();
  inline void set_allocated_password(::std::string* password);

  // @@protoc_insertion_point(class_scope:ssp.LoginReq)
 private:
  inline void set_has_header();
  inline void clear_has_header();
  inline void set_has_user_name();
  inline void clear_has_user_name();
  inline void set_has_password();
  inline void clear_has_password();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::ssp::MsgHeader* header_;
  ::std::string* user_name_;
  ::std::string* password_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_message_5fdefine_2eproto();
  friend void protobuf_AssignDesc_message_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_message_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static LoginReq* default_instance_;
};
// -------------------------------------------------------------------

class LoginRsp : public ::google::protobuf::Message {
 public:
  LoginRsp();
  virtual ~LoginRsp();

  LoginRsp(const LoginRsp& from);

  inline LoginRsp& operator=(const LoginRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginRsp& default_instance();

  void Swap(LoginRsp* other);

  // implements Message ----------------------------------------------

  LoginRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LoginRsp& from);
  void MergeFrom(const LoginRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .ssp.MsgHeader header = 1;
  inline bool has_header() const;
  inline void clear_header();
  static const int kHeaderFieldNumber = 1;
  inline const ::ssp::MsgHeader& header() const;
  inline ::ssp::MsgHeader* mutable_header();
  inline ::ssp::MsgHeader* release_header();
  inline void set_allocated_header(::ssp::MsgHeader* header);

  // optional uint32 ret = 3;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 3;
  inline ::google::protobuf::uint32 ret() const;
  inline void set_ret(::google::protobuf::uint32 value);

  // optional string user_name = 4;
  inline bool has_user_name() const;
  inline void clear_user_name();
  static const int kUserNameFieldNumber = 4;
  inline const ::std::string& user_name() const;
  inline void set_user_name(const ::std::string& value);
  inline void set_user_name(const char* value);
  inline void set_user_name(const char* value, size_t size);
  inline ::std::string* mutable_user_name();
  inline ::std::string* release_user_name();
  inline void set_allocated_user_name(::std::string* user_name);

  // optional uint32 user_id = 5;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 5;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ssp.LoginRsp)
 private:
  inline void set_has_header();
  inline void clear_has_header();
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_user_name();
  inline void clear_has_user_name();
  inline void set_has_user_id();
  inline void clear_has_user_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::ssp::MsgHeader* header_;
  ::std::string* user_name_;
  ::google::protobuf::uint32 ret_;
  ::google::protobuf::uint32 user_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_message_5fdefine_2eproto();
  friend void protobuf_AssignDesc_message_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_message_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static LoginRsp* default_instance_;
};
// -------------------------------------------------------------------

class LogoutReq : public ::google::protobuf::Message {
 public:
  LogoutReq();
  virtual ~LogoutReq();

  LogoutReq(const LogoutReq& from);

  inline LogoutReq& operator=(const LogoutReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LogoutReq& default_instance();

  void Swap(LogoutReq* other);

  // implements Message ----------------------------------------------

  LogoutReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LogoutReq& from);
  void MergeFrom(const LogoutReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string user_id = 3;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 3;
  inline const ::std::string& user_id() const;
  inline void set_user_id(const ::std::string& value);
  inline void set_user_id(const char* value);
  inline void set_user_id(const char* value, size_t size);
  inline ::std::string* mutable_user_id();
  inline ::std::string* release_user_id();
  inline void set_allocated_user_id(::std::string* user_id);

  // @@protoc_insertion_point(class_scope:ssp.LogoutReq)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* user_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_message_5fdefine_2eproto();
  friend void protobuf_AssignDesc_message_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_message_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static LogoutReq* default_instance_;
};
// -------------------------------------------------------------------

class LogoutRsp : public ::google::protobuf::Message {
 public:
  LogoutRsp();
  virtual ~LogoutRsp();

  LogoutRsp(const LogoutRsp& from);

  inline LogoutRsp& operator=(const LogoutRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LogoutRsp& default_instance();

  void Swap(LogoutRsp* other);

  // implements Message ----------------------------------------------

  LogoutRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LogoutRsp& from);
  void MergeFrom(const LogoutRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 ret = 2;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 2;
  inline ::google::protobuf::uint32 ret() const;
  inline void set_ret(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ssp.LogoutRsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_message_5fdefine_2eproto();
  friend void protobuf_AssignDesc_message_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_message_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static LogoutRsp* default_instance_;
};
// -------------------------------------------------------------------

class AddFriendReq : public ::google::protobuf::Message {
 public:
  AddFriendReq();
  virtual ~AddFriendReq();

  AddFriendReq(const AddFriendReq& from);

  inline AddFriendReq& operator=(const AddFriendReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AddFriendReq& default_instance();

  void Swap(AddFriendReq* other);

  // implements Message ----------------------------------------------

  AddFriendReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AddFriendReq& from);
  void MergeFrom(const AddFriendReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .ssp.MsgHeader header = 1;
  inline bool has_header() const;
  inline void clear_header();
  static const int kHeaderFieldNumber = 1;
  inline const ::ssp::MsgHeader& header() const;
  inline ::ssp::MsgHeader* mutable_header();
  inline ::ssp::MsgHeader* release_header();
  inline void set_allocated_header(::ssp::MsgHeader* header);

  // optional uint32 user_id = 2;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // optional uint32 other_id = 3;
  inline bool has_other_id() const;
  inline void clear_other_id();
  static const int kOtherIdFieldNumber = 3;
  inline ::google::protobuf::uint32 other_id() const;
  inline void set_other_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ssp.AddFriendReq)
 private:
  inline void set_has_header();
  inline void clear_has_header();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_other_id();
  inline void clear_has_other_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::ssp::MsgHeader* header_;
  ::google::protobuf::uint32 user_id_;
  ::google::protobuf::uint32 other_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_message_5fdefine_2eproto();
  friend void protobuf_AssignDesc_message_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_message_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static AddFriendReq* default_instance_;
};
// -------------------------------------------------------------------

class AddFriendRsp : public ::google::protobuf::Message {
 public:
  AddFriendRsp();
  virtual ~AddFriendRsp();

  AddFriendRsp(const AddFriendRsp& from);

  inline AddFriendRsp& operator=(const AddFriendRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AddFriendRsp& default_instance();

  void Swap(AddFriendRsp* other);

  // implements Message ----------------------------------------------

  AddFriendRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AddFriendRsp& from);
  void MergeFrom(const AddFriendRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .ssp.MsgHeader header = 1;
  inline bool has_header() const;
  inline void clear_header();
  static const int kHeaderFieldNumber = 1;
  inline const ::ssp::MsgHeader& header() const;
  inline ::ssp::MsgHeader* mutable_header();
  inline ::ssp::MsgHeader* release_header();
  inline void set_allocated_header(::ssp::MsgHeader* header);

  // optional uint32 ret = 2;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 2;
  inline ::google::protobuf::uint32 ret() const;
  inline void set_ret(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ssp.AddFriendRsp)
 private:
  inline void set_has_header();
  inline void clear_has_header();
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::ssp::MsgHeader* header_;
  ::google::protobuf::uint32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_message_5fdefine_2eproto();
  friend void protobuf_AssignDesc_message_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_message_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static AddFriendRsp* default_instance_;
};
// -------------------------------------------------------------------

class DelFriendReq : public ::google::protobuf::Message {
 public:
  DelFriendReq();
  virtual ~DelFriendReq();

  DelFriendReq(const DelFriendReq& from);

  inline DelFriendReq& operator=(const DelFriendReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DelFriendReq& default_instance();

  void Swap(DelFriendReq* other);

  // implements Message ----------------------------------------------

  DelFriendReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DelFriendReq& from);
  void MergeFrom(const DelFriendReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .ssp.MsgHeader header = 1;
  inline bool has_header() const;
  inline void clear_header();
  static const int kHeaderFieldNumber = 1;
  inline const ::ssp::MsgHeader& header() const;
  inline ::ssp::MsgHeader* mutable_header();
  inline ::ssp::MsgHeader* release_header();
  inline void set_allocated_header(::ssp::MsgHeader* header);

  // optional uint32 user_id = 2;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // optional uint32 other_id = 3;
  inline bool has_other_id() const;
  inline void clear_other_id();
  static const int kOtherIdFieldNumber = 3;
  inline ::google::protobuf::uint32 other_id() const;
  inline void set_other_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ssp.DelFriendReq)
 private:
  inline void set_has_header();
  inline void clear_has_header();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_other_id();
  inline void clear_has_other_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::ssp::MsgHeader* header_;
  ::google::protobuf::uint32 user_id_;
  ::google::protobuf::uint32 other_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_message_5fdefine_2eproto();
  friend void protobuf_AssignDesc_message_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_message_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static DelFriendReq* default_instance_;
};
// -------------------------------------------------------------------

class DelFriendRsp : public ::google::protobuf::Message {
 public:
  DelFriendRsp();
  virtual ~DelFriendRsp();

  DelFriendRsp(const DelFriendRsp& from);

  inline DelFriendRsp& operator=(const DelFriendRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DelFriendRsp& default_instance();

  void Swap(DelFriendRsp* other);

  // implements Message ----------------------------------------------

  DelFriendRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DelFriendRsp& from);
  void MergeFrom(const DelFriendRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .ssp.MsgHeader header = 1;
  inline bool has_header() const;
  inline void clear_header();
  static const int kHeaderFieldNumber = 1;
  inline const ::ssp::MsgHeader& header() const;
  inline ::ssp::MsgHeader* mutable_header();
  inline ::ssp::MsgHeader* release_header();
  inline void set_allocated_header(::ssp::MsgHeader* header);

  // optional uint32 ret = 2;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 2;
  inline ::google::protobuf::uint32 ret() const;
  inline void set_ret(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ssp.DelFriendRsp)
 private:
  inline void set_has_header();
  inline void clear_has_header();
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::ssp::MsgHeader* header_;
  ::google::protobuf::uint32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_message_5fdefine_2eproto();
  friend void protobuf_AssignDesc_message_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_message_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static DelFriendRsp* default_instance_;
};
// -------------------------------------------------------------------

class PublishMessageReq : public ::google::protobuf::Message {
 public:
  PublishMessageReq();
  virtual ~PublishMessageReq();

  PublishMessageReq(const PublishMessageReq& from);

  inline PublishMessageReq& operator=(const PublishMessageReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PublishMessageReq& default_instance();

  void Swap(PublishMessageReq* other);

  // implements Message ----------------------------------------------

  PublishMessageReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PublishMessageReq& from);
  void MergeFrom(const PublishMessageReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .ssp.MsgHeader header = 1;
  inline bool has_header() const;
  inline void clear_header();
  static const int kHeaderFieldNumber = 1;
  inline const ::ssp::MsgHeader& header() const;
  inline ::ssp::MsgHeader* mutable_header();
  inline ::ssp::MsgHeader* release_header();
  inline void set_allocated_header(::ssp::MsgHeader* header);

  // optional uint32 user_id = 2;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // optional string content = 3;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 3;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // @@protoc_insertion_point(class_scope:ssp.PublishMessageReq)
 private:
  inline void set_has_header();
  inline void clear_has_header();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_content();
  inline void clear_has_content();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::ssp::MsgHeader* header_;
  ::std::string* content_;
  ::google::protobuf::uint32 user_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_message_5fdefine_2eproto();
  friend void protobuf_AssignDesc_message_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_message_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static PublishMessageReq* default_instance_;
};
// -------------------------------------------------------------------

class PublishMessageRsp : public ::google::protobuf::Message {
 public:
  PublishMessageRsp();
  virtual ~PublishMessageRsp();

  PublishMessageRsp(const PublishMessageRsp& from);

  inline PublishMessageRsp& operator=(const PublishMessageRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PublishMessageRsp& default_instance();

  void Swap(PublishMessageRsp* other);

  // implements Message ----------------------------------------------

  PublishMessageRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PublishMessageRsp& from);
  void MergeFrom(const PublishMessageRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .ssp.MsgHeader header = 1;
  inline bool has_header() const;
  inline void clear_header();
  static const int kHeaderFieldNumber = 1;
  inline const ::ssp::MsgHeader& header() const;
  inline ::ssp::MsgHeader* mutable_header();
  inline ::ssp::MsgHeader* release_header();
  inline void set_allocated_header(::ssp::MsgHeader* header);

  // optional uint32 ret = 2;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 2;
  inline ::google::protobuf::uint32 ret() const;
  inline void set_ret(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ssp.PublishMessageRsp)
 private:
  inline void set_has_header();
  inline void clear_has_header();
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::ssp::MsgHeader* header_;
  ::google::protobuf::uint32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_message_5fdefine_2eproto();
  friend void protobuf_AssignDesc_message_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_message_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static PublishMessageRsp* default_instance_;
};
// -------------------------------------------------------------------

class GetMessageListReq : public ::google::protobuf::Message {
 public:
  GetMessageListReq();
  virtual ~GetMessageListReq();

  GetMessageListReq(const GetMessageListReq& from);

  inline GetMessageListReq& operator=(const GetMessageListReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetMessageListReq& default_instance();

  void Swap(GetMessageListReq* other);

  // implements Message ----------------------------------------------

  GetMessageListReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetMessageListReq& from);
  void MergeFrom(const GetMessageListReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .ssp.MsgHeader header = 1;
  inline bool has_header() const;
  inline void clear_header();
  static const int kHeaderFieldNumber = 1;
  inline const ::ssp::MsgHeader& header() const;
  inline ::ssp::MsgHeader* mutable_header();
  inline ::ssp::MsgHeader* release_header();
  inline void set_allocated_header(::ssp::MsgHeader* header);

  // optional uint32 user_id = 2;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ssp.GetMessageListReq)
 private:
  inline void set_has_header();
  inline void clear_has_header();
  inline void set_has_user_id();
  inline void clear_has_user_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::ssp::MsgHeader* header_;
  ::google::protobuf::uint32 user_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_message_5fdefine_2eproto();
  friend void protobuf_AssignDesc_message_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_message_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static GetMessageListReq* default_instance_;
};
// -------------------------------------------------------------------

class MessageItem : public ::google::protobuf::Message {
 public:
  MessageItem();
  virtual ~MessageItem();

  MessageItem(const MessageItem& from);

  inline MessageItem& operator=(const MessageItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MessageItem& default_instance();

  void Swap(MessageItem* other);

  // implements Message ----------------------------------------------

  MessageItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MessageItem& from);
  void MergeFrom(const MessageItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 publisher_id = 1;
  inline bool has_publisher_id() const;
  inline void clear_publisher_id();
  static const int kPublisherIdFieldNumber = 1;
  inline ::google::protobuf::uint32 publisher_id() const;
  inline void set_publisher_id(::google::protobuf::uint32 value);

  // optional uint32 publish_time = 2;
  inline bool has_publish_time() const;
  inline void clear_publish_time();
  static const int kPublishTimeFieldNumber = 2;
  inline ::google::protobuf::uint32 publish_time() const;
  inline void set_publish_time(::google::protobuf::uint32 value);

  // optional string content = 3;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 3;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // @@protoc_insertion_point(class_scope:ssp.MessageItem)
 private:
  inline void set_has_publisher_id();
  inline void clear_has_publisher_id();
  inline void set_has_publish_time();
  inline void clear_has_publish_time();
  inline void set_has_content();
  inline void clear_has_content();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 publisher_id_;
  ::google::protobuf::uint32 publish_time_;
  ::std::string* content_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_message_5fdefine_2eproto();
  friend void protobuf_AssignDesc_message_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_message_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static MessageItem* default_instance_;
};
// -------------------------------------------------------------------

class GetMessageListRsp : public ::google::protobuf::Message {
 public:
  GetMessageListRsp();
  virtual ~GetMessageListRsp();

  GetMessageListRsp(const GetMessageListRsp& from);

  inline GetMessageListRsp& operator=(const GetMessageListRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetMessageListRsp& default_instance();

  void Swap(GetMessageListRsp* other);

  // implements Message ----------------------------------------------

  GetMessageListRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetMessageListRsp& from);
  void MergeFrom(const GetMessageListRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .ssp.MsgHeader header = 1;
  inline bool has_header() const;
  inline void clear_header();
  static const int kHeaderFieldNumber = 1;
  inline const ::ssp::MsgHeader& header() const;
  inline ::ssp::MsgHeader* mutable_header();
  inline ::ssp::MsgHeader* release_header();
  inline void set_allocated_header(::ssp::MsgHeader* header);

  // optional uint32 ret = 2;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 2;
  inline ::google::protobuf::uint32 ret() const;
  inline void set_ret(::google::protobuf::uint32 value);

  // repeated .ssp.MessageItem message_list = 3;
  inline int message_list_size() const;
  inline void clear_message_list();
  static const int kMessageListFieldNumber = 3;
  inline const ::ssp::MessageItem& message_list(int index) const;
  inline ::ssp::MessageItem* mutable_message_list(int index);
  inline ::ssp::MessageItem* add_message_list();
  inline const ::google::protobuf::RepeatedPtrField< ::ssp::MessageItem >&
      message_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::ssp::MessageItem >*
      mutable_message_list();

  // @@protoc_insertion_point(class_scope:ssp.GetMessageListRsp)
 private:
  inline void set_has_header();
  inline void clear_has_header();
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::ssp::MsgHeader* header_;
  ::google::protobuf::RepeatedPtrField< ::ssp::MessageItem > message_list_;
  ::google::protobuf::uint32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_message_5fdefine_2eproto();
  friend void protobuf_AssignDesc_message_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_message_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static GetMessageListRsp* default_instance_;
};
// -------------------------------------------------------------------

class GetPhotoReq : public ::google::protobuf::Message {
 public:
  GetPhotoReq();
  virtual ~GetPhotoReq();

  GetPhotoReq(const GetPhotoReq& from);

  inline GetPhotoReq& operator=(const GetPhotoReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetPhotoReq& default_instance();

  void Swap(GetPhotoReq* other);

  // implements Message ----------------------------------------------

  GetPhotoReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetPhotoReq& from);
  void MergeFrom(const GetPhotoReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .ssp.MsgHeader header = 1;
  inline bool has_header() const;
  inline void clear_header();
  static const int kHeaderFieldNumber = 1;
  inline const ::ssp::MsgHeader& header() const;
  inline ::ssp::MsgHeader* mutable_header();
  inline ::ssp::MsgHeader* release_header();
  inline void set_allocated_header(::ssp::MsgHeader* header);

  // optional uint32 user_id = 2;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ssp.GetPhotoReq)
 private:
  inline void set_has_header();
  inline void clear_has_header();
  inline void set_has_user_id();
  inline void clear_has_user_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::ssp::MsgHeader* header_;
  ::google::protobuf::uint32 user_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_message_5fdefine_2eproto();
  friend void protobuf_AssignDesc_message_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_message_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static GetPhotoReq* default_instance_;
};
// -------------------------------------------------------------------

class GetPhotoRsp : public ::google::protobuf::Message {
 public:
  GetPhotoRsp();
  virtual ~GetPhotoRsp();

  GetPhotoRsp(const GetPhotoRsp& from);

  inline GetPhotoRsp& operator=(const GetPhotoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetPhotoRsp& default_instance();

  void Swap(GetPhotoRsp* other);

  // implements Message ----------------------------------------------

  GetPhotoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetPhotoRsp& from);
  void MergeFrom(const GetPhotoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .ssp.MsgHeader header = 1;
  inline bool has_header() const;
  inline void clear_header();
  static const int kHeaderFieldNumber = 1;
  inline const ::ssp::MsgHeader& header() const;
  inline ::ssp::MsgHeader* mutable_header();
  inline ::ssp::MsgHeader* release_header();
  inline void set_allocated_header(::ssp::MsgHeader* header);

  // optional uint32 ret = 2;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 2;
  inline ::google::protobuf::uint32 ret() const;
  inline void set_ret(::google::protobuf::uint32 value);

  // optional uint32 last_publisher_id = 3;
  inline bool has_last_publisher_id() const;
  inline void clear_last_publisher_id();
  static const int kLastPublisherIdFieldNumber = 3;
  inline ::google::protobuf::uint32 last_publisher_id() const;
  inline void set_last_publisher_id(::google::protobuf::uint32 value);

  // optional string last_publish_name = 4;
  inline bool has_last_publish_name() const;
  inline void clear_last_publish_name();
  static const int kLastPublishNameFieldNumber = 4;
  inline const ::std::string& last_publish_name() const;
  inline void set_last_publish_name(const ::std::string& value);
  inline void set_last_publish_name(const char* value);
  inline void set_last_publish_name(const char* value, size_t size);
  inline ::std::string* mutable_last_publish_name();
  inline ::std::string* release_last_publish_name();
  inline void set_allocated_last_publish_name(::std::string* last_publish_name);

  // @@protoc_insertion_point(class_scope:ssp.GetPhotoRsp)
 private:
  inline void set_has_header();
  inline void clear_has_header();
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_last_publisher_id();
  inline void clear_has_last_publisher_id();
  inline void set_has_last_publish_name();
  inline void clear_has_last_publish_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::ssp::MsgHeader* header_;
  ::google::protobuf::uint32 ret_;
  ::google::protobuf::uint32 last_publisher_id_;
  ::std::string* last_publish_name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_message_5fdefine_2eproto();
  friend void protobuf_AssignDesc_message_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_message_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static GetPhotoRsp* default_instance_;
};
// -------------------------------------------------------------------

class CommonReq : public ::google::protobuf::Message {
 public:
  CommonReq();
  virtual ~CommonReq();

  CommonReq(const CommonReq& from);

  inline CommonReq& operator=(const CommonReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CommonReq& default_instance();

  void Swap(CommonReq* other);

  // implements Message ----------------------------------------------

  CommonReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CommonReq& from);
  void MergeFrom(const CommonReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .ssp.MsgHeader header = 1;
  inline bool has_header() const;
  inline void clear_header();
  static const int kHeaderFieldNumber = 1;
  inline const ::ssp::MsgHeader& header() const;
  inline ::ssp::MsgHeader* mutable_header();
  inline ::ssp::MsgHeader* release_header();
  inline void set_allocated_header(::ssp::MsgHeader* header);

  // optional .ssp.RegReq reg_req = 2;
  inline bool has_reg_req() const;
  inline void clear_reg_req();
  static const int kRegReqFieldNumber = 2;
  inline const ::ssp::RegReq& reg_req() const;
  inline ::ssp::RegReq* mutable_reg_req();
  inline ::ssp::RegReq* release_reg_req();
  inline void set_allocated_reg_req(::ssp::RegReq* reg_req);

  // optional .ssp.LoginReq login_req = 3;
  inline bool has_login_req() const;
  inline void clear_login_req();
  static const int kLoginReqFieldNumber = 3;
  inline const ::ssp::LoginReq& login_req() const;
  inline ::ssp::LoginReq* mutable_login_req();
  inline ::ssp::LoginReq* release_login_req();
  inline void set_allocated_login_req(::ssp::LoginReq* login_req);

  // optional .ssp.LogoutReq logout_req = 4;
  inline bool has_logout_req() const;
  inline void clear_logout_req();
  static const int kLogoutReqFieldNumber = 4;
  inline const ::ssp::LogoutReq& logout_req() const;
  inline ::ssp::LogoutReq* mutable_logout_req();
  inline ::ssp::LogoutReq* release_logout_req();
  inline void set_allocated_logout_req(::ssp::LogoutReq* logout_req);

  // optional .ssp.AddFriendReq add_friend_req = 5;
  inline bool has_add_friend_req() const;
  inline void clear_add_friend_req();
  static const int kAddFriendReqFieldNumber = 5;
  inline const ::ssp::AddFriendReq& add_friend_req() const;
  inline ::ssp::AddFriendReq* mutable_add_friend_req();
  inline ::ssp::AddFriendReq* release_add_friend_req();
  inline void set_allocated_add_friend_req(::ssp::AddFriendReq* add_friend_req);

  // optional .ssp.DelFriendReq del_friend_req = 6;
  inline bool has_del_friend_req() const;
  inline void clear_del_friend_req();
  static const int kDelFriendReqFieldNumber = 6;
  inline const ::ssp::DelFriendReq& del_friend_req() const;
  inline ::ssp::DelFriendReq* mutable_del_friend_req();
  inline ::ssp::DelFriendReq* release_del_friend_req();
  inline void set_allocated_del_friend_req(::ssp::DelFriendReq* del_friend_req);

  // optional .ssp.GetPhotoReq get_photo_req = 7;
  inline bool has_get_photo_req() const;
  inline void clear_get_photo_req();
  static const int kGetPhotoReqFieldNumber = 7;
  inline const ::ssp::GetPhotoReq& get_photo_req() const;
  inline ::ssp::GetPhotoReq* mutable_get_photo_req();
  inline ::ssp::GetPhotoReq* release_get_photo_req();
  inline void set_allocated_get_photo_req(::ssp::GetPhotoReq* get_photo_req);

  // optional .ssp.GetMessageListReq get_message_list_req = 8;
  inline bool has_get_message_list_req() const;
  inline void clear_get_message_list_req();
  static const int kGetMessageListReqFieldNumber = 8;
  inline const ::ssp::GetMessageListReq& get_message_list_req() const;
  inline ::ssp::GetMessageListReq* mutable_get_message_list_req();
  inline ::ssp::GetMessageListReq* release_get_message_list_req();
  inline void set_allocated_get_message_list_req(::ssp::GetMessageListReq* get_message_list_req);

  // optional .ssp.PublishMessageReq publish_message_req = 9;
  inline bool has_publish_message_req() const;
  inline void clear_publish_message_req();
  static const int kPublishMessageReqFieldNumber = 9;
  inline const ::ssp::PublishMessageReq& publish_message_req() const;
  inline ::ssp::PublishMessageReq* mutable_publish_message_req();
  inline ::ssp::PublishMessageReq* release_publish_message_req();
  inline void set_allocated_publish_message_req(::ssp::PublishMessageReq* publish_message_req);

  // @@protoc_insertion_point(class_scope:ssp.CommonReq)
 private:
  inline void set_has_header();
  inline void clear_has_header();
  inline void set_has_reg_req();
  inline void clear_has_reg_req();
  inline void set_has_login_req();
  inline void clear_has_login_req();
  inline void set_has_logout_req();
  inline void clear_has_logout_req();
  inline void set_has_add_friend_req();
  inline void clear_has_add_friend_req();
  inline void set_has_del_friend_req();
  inline void clear_has_del_friend_req();
  inline void set_has_get_photo_req();
  inline void clear_has_get_photo_req();
  inline void set_has_get_message_list_req();
  inline void clear_has_get_message_list_req();
  inline void set_has_publish_message_req();
  inline void clear_has_publish_message_req();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::ssp::MsgHeader* header_;
  ::ssp::RegReq* reg_req_;
  ::ssp::LoginReq* login_req_;
  ::ssp::LogoutReq* logout_req_;
  ::ssp::AddFriendReq* add_friend_req_;
  ::ssp::DelFriendReq* del_friend_req_;
  ::ssp::GetPhotoReq* get_photo_req_;
  ::ssp::GetMessageListReq* get_message_list_req_;
  ::ssp::PublishMessageReq* publish_message_req_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_message_5fdefine_2eproto();
  friend void protobuf_AssignDesc_message_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_message_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static CommonReq* default_instance_;
};
// -------------------------------------------------------------------

class CommonRsp : public ::google::protobuf::Message {
 public:
  CommonRsp();
  virtual ~CommonRsp();

  CommonRsp(const CommonRsp& from);

  inline CommonRsp& operator=(const CommonRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CommonRsp& default_instance();

  void Swap(CommonRsp* other);

  // implements Message ----------------------------------------------

  CommonRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CommonRsp& from);
  void MergeFrom(const CommonRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .ssp.MsgHeader header = 1;
  inline bool has_header() const;
  inline void clear_header();
  static const int kHeaderFieldNumber = 1;
  inline const ::ssp::MsgHeader& header() const;
  inline ::ssp::MsgHeader* mutable_header();
  inline ::ssp::MsgHeader* release_header();
  inline void set_allocated_header(::ssp::MsgHeader* header);

  // optional .ssp.RegRsp reg_rsp = 2;
  inline bool has_reg_rsp() const;
  inline void clear_reg_rsp();
  static const int kRegRspFieldNumber = 2;
  inline const ::ssp::RegRsp& reg_rsp() const;
  inline ::ssp::RegRsp* mutable_reg_rsp();
  inline ::ssp::RegRsp* release_reg_rsp();
  inline void set_allocated_reg_rsp(::ssp::RegRsp* reg_rsp);

  // optional .ssp.LoginRsp login_rsp = 3;
  inline bool has_login_rsp() const;
  inline void clear_login_rsp();
  static const int kLoginRspFieldNumber = 3;
  inline const ::ssp::LoginRsp& login_rsp() const;
  inline ::ssp::LoginRsp* mutable_login_rsp();
  inline ::ssp::LoginRsp* release_login_rsp();
  inline void set_allocated_login_rsp(::ssp::LoginRsp* login_rsp);

  // optional .ssp.LogoutRsp logout_rsp = 4;
  inline bool has_logout_rsp() const;
  inline void clear_logout_rsp();
  static const int kLogoutRspFieldNumber = 4;
  inline const ::ssp::LogoutRsp& logout_rsp() const;
  inline ::ssp::LogoutRsp* mutable_logout_rsp();
  inline ::ssp::LogoutRsp* release_logout_rsp();
  inline void set_allocated_logout_rsp(::ssp::LogoutRsp* logout_rsp);

  // optional .ssp.AddFriendRsp add_friend_rsp = 5;
  inline bool has_add_friend_rsp() const;
  inline void clear_add_friend_rsp();
  static const int kAddFriendRspFieldNumber = 5;
  inline const ::ssp::AddFriendRsp& add_friend_rsp() const;
  inline ::ssp::AddFriendRsp* mutable_add_friend_rsp();
  inline ::ssp::AddFriendRsp* release_add_friend_rsp();
  inline void set_allocated_add_friend_rsp(::ssp::AddFriendRsp* add_friend_rsp);

  // optional .ssp.DelFriendRsp del_friend_rsp = 6;
  inline bool has_del_friend_rsp() const;
  inline void clear_del_friend_rsp();
  static const int kDelFriendRspFieldNumber = 6;
  inline const ::ssp::DelFriendRsp& del_friend_rsp() const;
  inline ::ssp::DelFriendRsp* mutable_del_friend_rsp();
  inline ::ssp::DelFriendRsp* release_del_friend_rsp();
  inline void set_allocated_del_friend_rsp(::ssp::DelFriendRsp* del_friend_rsp);

  // optional .ssp.GetPhotoRsp get_photo_rsp = 7;
  inline bool has_get_photo_rsp() const;
  inline void clear_get_photo_rsp();
  static const int kGetPhotoRspFieldNumber = 7;
  inline const ::ssp::GetPhotoRsp& get_photo_rsp() const;
  inline ::ssp::GetPhotoRsp* mutable_get_photo_rsp();
  inline ::ssp::GetPhotoRsp* release_get_photo_rsp();
  inline void set_allocated_get_photo_rsp(::ssp::GetPhotoRsp* get_photo_rsp);

  // optional .ssp.GetMessageListRsp get_message_list_rsp = 8;
  inline bool has_get_message_list_rsp() const;
  inline void clear_get_message_list_rsp();
  static const int kGetMessageListRspFieldNumber = 8;
  inline const ::ssp::GetMessageListRsp& get_message_list_rsp() const;
  inline ::ssp::GetMessageListRsp* mutable_get_message_list_rsp();
  inline ::ssp::GetMessageListRsp* release_get_message_list_rsp();
  inline void set_allocated_get_message_list_rsp(::ssp::GetMessageListRsp* get_message_list_rsp);

  // optional .ssp.PublishMessageRsp publish_message_rsp = 9;
  inline bool has_publish_message_rsp() const;
  inline void clear_publish_message_rsp();
  static const int kPublishMessageRspFieldNumber = 9;
  inline const ::ssp::PublishMessageRsp& publish_message_rsp() const;
  inline ::ssp::PublishMessageRsp* mutable_publish_message_rsp();
  inline ::ssp::PublishMessageRsp* release_publish_message_rsp();
  inline void set_allocated_publish_message_rsp(::ssp::PublishMessageRsp* publish_message_rsp);

  // @@protoc_insertion_point(class_scope:ssp.CommonRsp)
 private:
  inline void set_has_header();
  inline void clear_has_header();
  inline void set_has_reg_rsp();
  inline void clear_has_reg_rsp();
  inline void set_has_login_rsp();
  inline void clear_has_login_rsp();
  inline void set_has_logout_rsp();
  inline void clear_has_logout_rsp();
  inline void set_has_add_friend_rsp();
  inline void clear_has_add_friend_rsp();
  inline void set_has_del_friend_rsp();
  inline void clear_has_del_friend_rsp();
  inline void set_has_get_photo_rsp();
  inline void clear_has_get_photo_rsp();
  inline void set_has_get_message_list_rsp();
  inline void clear_has_get_message_list_rsp();
  inline void set_has_publish_message_rsp();
  inline void clear_has_publish_message_rsp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::ssp::MsgHeader* header_;
  ::ssp::RegRsp* reg_rsp_;
  ::ssp::LoginRsp* login_rsp_;
  ::ssp::LogoutRsp* logout_rsp_;
  ::ssp::AddFriendRsp* add_friend_rsp_;
  ::ssp::DelFriendRsp* del_friend_rsp_;
  ::ssp::GetPhotoRsp* get_photo_rsp_;
  ::ssp::GetMessageListRsp* get_message_list_rsp_;
  ::ssp::PublishMessageRsp* publish_message_rsp_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_message_5fdefine_2eproto();
  friend void protobuf_AssignDesc_message_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_message_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static CommonRsp* default_instance_;
};
// ===================================================================


// ===================================================================

// MsgHeader

// optional uint32 ver = 1;
inline bool MsgHeader::has_ver() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgHeader::set_has_ver() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgHeader::clear_has_ver() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgHeader::clear_ver() {
  ver_ = 0u;
  clear_has_ver();
}
inline ::google::protobuf::uint32 MsgHeader::ver() const {
  return ver_;
}
inline void MsgHeader::set_ver(::google::protobuf::uint32 value) {
  set_has_ver();
  ver_ = value;
}

// optional uint32 cmd_type = 2;
inline bool MsgHeader::has_cmd_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgHeader::set_has_cmd_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgHeader::clear_has_cmd_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgHeader::clear_cmd_type() {
  cmd_type_ = 0u;
  clear_has_cmd_type();
}
inline ::google::protobuf::uint32 MsgHeader::cmd_type() const {
  return cmd_type_;
}
inline void MsgHeader::set_cmd_type(::google::protobuf::uint32 value) {
  set_has_cmd_type();
  cmd_type_ = value;
}

// -------------------------------------------------------------------

// RegReq

// optional .ssp.MsgHeader header = 1;
inline bool RegReq::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RegReq::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RegReq::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RegReq::clear_header() {
  if (header_ != NULL) header_->::ssp::MsgHeader::Clear();
  clear_has_header();
}
inline const ::ssp::MsgHeader& RegReq::header() const {
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::ssp::MsgHeader* RegReq::mutable_header() {
  set_has_header();
  if (header_ == NULL) header_ = new ::ssp::MsgHeader;
  return header_;
}
inline ::ssp::MsgHeader* RegReq::release_header() {
  clear_has_header();
  ::ssp::MsgHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline void RegReq::set_allocated_header(::ssp::MsgHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
}

// optional string user_name = 3;
inline bool RegReq::has_user_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RegReq::set_has_user_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RegReq::clear_has_user_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RegReq::clear_user_name() {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    user_name_->clear();
  }
  clear_has_user_name();
}
inline const ::std::string& RegReq::user_name() const {
  return *user_name_;
}
inline void RegReq::set_user_name(const ::std::string& value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
}
inline void RegReq::set_user_name(const char* value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
}
inline void RegReq::set_user_name(const char* value, size_t size) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RegReq::mutable_user_name() {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  return user_name_;
}
inline ::std::string* RegReq::release_user_name() {
  clear_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_name_;
    user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RegReq::set_allocated_user_name(::std::string* user_name) {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete user_name_;
  }
  if (user_name) {
    set_has_user_name();
    user_name_ = user_name;
  } else {
    clear_has_user_name();
    user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string password = 4;
inline bool RegReq::has_password() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RegReq::set_has_password() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RegReq::clear_has_password() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RegReq::clear_password() {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    password_->clear();
  }
  clear_has_password();
}
inline const ::std::string& RegReq::password() const {
  return *password_;
}
inline void RegReq::set_password(const ::std::string& value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void RegReq::set_password(const char* value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void RegReq::set_password(const char* value, size_t size) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RegReq::mutable_password() {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  return password_;
}
inline ::std::string* RegReq::release_password() {
  clear_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = password_;
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RegReq::set_allocated_password(::std::string* password) {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (password) {
    set_has_password();
    password_ = password;
  } else {
    clear_has_password();
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 from = 5;
inline bool RegReq::has_from() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RegReq::set_has_from() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RegReq::clear_has_from() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RegReq::clear_from() {
  from_ = 0u;
  clear_has_from();
}
inline ::google::protobuf::uint32 RegReq::from() const {
  return from_;
}
inline void RegReq::set_from(::google::protobuf::uint32 value) {
  set_has_from();
  from_ = value;
}

// -------------------------------------------------------------------

// RegRsp

// optional .ssp.MsgHeader header = 1;
inline bool RegRsp::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RegRsp::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RegRsp::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RegRsp::clear_header() {
  if (header_ != NULL) header_->::ssp::MsgHeader::Clear();
  clear_has_header();
}
inline const ::ssp::MsgHeader& RegRsp::header() const {
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::ssp::MsgHeader* RegRsp::mutable_header() {
  set_has_header();
  if (header_ == NULL) header_ = new ::ssp::MsgHeader;
  return header_;
}
inline ::ssp::MsgHeader* RegRsp::release_header() {
  clear_has_header();
  ::ssp::MsgHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline void RegRsp::set_allocated_header(::ssp::MsgHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
}

// optional string user_name = 2;
inline bool RegRsp::has_user_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RegRsp::set_has_user_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RegRsp::clear_has_user_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RegRsp::clear_user_name() {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    user_name_->clear();
  }
  clear_has_user_name();
}
inline const ::std::string& RegRsp::user_name() const {
  return *user_name_;
}
inline void RegRsp::set_user_name(const ::std::string& value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
}
inline void RegRsp::set_user_name(const char* value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
}
inline void RegRsp::set_user_name(const char* value, size_t size) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RegRsp::mutable_user_name() {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  return user_name_;
}
inline ::std::string* RegRsp::release_user_name() {
  clear_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_name_;
    user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RegRsp::set_allocated_user_name(::std::string* user_name) {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete user_name_;
  }
  if (user_name) {
    set_has_user_name();
    user_name_ = user_name;
  } else {
    clear_has_user_name();
    user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 ret = 3;
inline bool RegRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RegRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RegRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RegRsp::clear_ret() {
  ret_ = 0u;
  clear_has_ret();
}
inline ::google::protobuf::uint32 RegRsp::ret() const {
  return ret_;
}
inline void RegRsp::set_ret(::google::protobuf::uint32 value) {
  set_has_ret();
  ret_ = value;
}

// optional uint32 user_id = 4;
inline bool RegRsp::has_user_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RegRsp::set_has_user_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RegRsp::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RegRsp::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 RegRsp::user_id() const {
  return user_id_;
}
inline void RegRsp::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
}

// -------------------------------------------------------------------

// LoginReq

// optional .ssp.MsgHeader header = 1;
inline bool LoginReq::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LoginReq::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LoginReq::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LoginReq::clear_header() {
  if (header_ != NULL) header_->::ssp::MsgHeader::Clear();
  clear_has_header();
}
inline const ::ssp::MsgHeader& LoginReq::header() const {
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::ssp::MsgHeader* LoginReq::mutable_header() {
  set_has_header();
  if (header_ == NULL) header_ = new ::ssp::MsgHeader;
  return header_;
}
inline ::ssp::MsgHeader* LoginReq::release_header() {
  clear_has_header();
  ::ssp::MsgHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline void LoginReq::set_allocated_header(::ssp::MsgHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
}

// optional string user_name = 3;
inline bool LoginReq::has_user_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LoginReq::set_has_user_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LoginReq::clear_has_user_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LoginReq::clear_user_name() {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    user_name_->clear();
  }
  clear_has_user_name();
}
inline const ::std::string& LoginReq::user_name() const {
  return *user_name_;
}
inline void LoginReq::set_user_name(const ::std::string& value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
}
inline void LoginReq::set_user_name(const char* value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
}
inline void LoginReq::set_user_name(const char* value, size_t size) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LoginReq::mutable_user_name() {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  return user_name_;
}
inline ::std::string* LoginReq::release_user_name() {
  clear_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_name_;
    user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LoginReq::set_allocated_user_name(::std::string* user_name) {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete user_name_;
  }
  if (user_name) {
    set_has_user_name();
    user_name_ = user_name;
  } else {
    clear_has_user_name();
    user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string password = 4;
inline bool LoginReq::has_password() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LoginReq::set_has_password() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LoginReq::clear_has_password() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LoginReq::clear_password() {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    password_->clear();
  }
  clear_has_password();
}
inline const ::std::string& LoginReq::password() const {
  return *password_;
}
inline void LoginReq::set_password(const ::std::string& value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void LoginReq::set_password(const char* value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void LoginReq::set_password(const char* value, size_t size) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LoginReq::mutable_password() {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  return password_;
}
inline ::std::string* LoginReq::release_password() {
  clear_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = password_;
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LoginReq::set_allocated_password(::std::string* password) {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (password) {
    set_has_password();
    password_ = password;
  } else {
    clear_has_password();
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// LoginRsp

// optional .ssp.MsgHeader header = 1;
inline bool LoginRsp::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LoginRsp::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LoginRsp::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LoginRsp::clear_header() {
  if (header_ != NULL) header_->::ssp::MsgHeader::Clear();
  clear_has_header();
}
inline const ::ssp::MsgHeader& LoginRsp::header() const {
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::ssp::MsgHeader* LoginRsp::mutable_header() {
  set_has_header();
  if (header_ == NULL) header_ = new ::ssp::MsgHeader;
  return header_;
}
inline ::ssp::MsgHeader* LoginRsp::release_header() {
  clear_has_header();
  ::ssp::MsgHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline void LoginRsp::set_allocated_header(::ssp::MsgHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
}

// optional uint32 ret = 3;
inline bool LoginRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LoginRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LoginRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LoginRsp::clear_ret() {
  ret_ = 0u;
  clear_has_ret();
}
inline ::google::protobuf::uint32 LoginRsp::ret() const {
  return ret_;
}
inline void LoginRsp::set_ret(::google::protobuf::uint32 value) {
  set_has_ret();
  ret_ = value;
}

// optional string user_name = 4;
inline bool LoginRsp::has_user_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LoginRsp::set_has_user_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LoginRsp::clear_has_user_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LoginRsp::clear_user_name() {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    user_name_->clear();
  }
  clear_has_user_name();
}
inline const ::std::string& LoginRsp::user_name() const {
  return *user_name_;
}
inline void LoginRsp::set_user_name(const ::std::string& value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
}
inline void LoginRsp::set_user_name(const char* value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
}
inline void LoginRsp::set_user_name(const char* value, size_t size) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LoginRsp::mutable_user_name() {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  return user_name_;
}
inline ::std::string* LoginRsp::release_user_name() {
  clear_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_name_;
    user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LoginRsp::set_allocated_user_name(::std::string* user_name) {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete user_name_;
  }
  if (user_name) {
    set_has_user_name();
    user_name_ = user_name;
  } else {
    clear_has_user_name();
    user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 user_id = 5;
inline bool LoginRsp::has_user_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LoginRsp::set_has_user_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LoginRsp::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LoginRsp::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 LoginRsp::user_id() const {
  return user_id_;
}
inline void LoginRsp::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
}

// -------------------------------------------------------------------

// LogoutReq

// optional string user_id = 3;
inline bool LogoutReq::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LogoutReq::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LogoutReq::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LogoutReq::clear_user_id() {
  if (user_id_ != &::google::protobuf::internal::kEmptyString) {
    user_id_->clear();
  }
  clear_has_user_id();
}
inline const ::std::string& LogoutReq::user_id() const {
  return *user_id_;
}
inline void LogoutReq::set_user_id(const ::std::string& value) {
  set_has_user_id();
  if (user_id_ == &::google::protobuf::internal::kEmptyString) {
    user_id_ = new ::std::string;
  }
  user_id_->assign(value);
}
inline void LogoutReq::set_user_id(const char* value) {
  set_has_user_id();
  if (user_id_ == &::google::protobuf::internal::kEmptyString) {
    user_id_ = new ::std::string;
  }
  user_id_->assign(value);
}
inline void LogoutReq::set_user_id(const char* value, size_t size) {
  set_has_user_id();
  if (user_id_ == &::google::protobuf::internal::kEmptyString) {
    user_id_ = new ::std::string;
  }
  user_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogoutReq::mutable_user_id() {
  set_has_user_id();
  if (user_id_ == &::google::protobuf::internal::kEmptyString) {
    user_id_ = new ::std::string;
  }
  return user_id_;
}
inline ::std::string* LogoutReq::release_user_id() {
  clear_has_user_id();
  if (user_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_id_;
    user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LogoutReq::set_allocated_user_id(::std::string* user_id) {
  if (user_id_ != &::google::protobuf::internal::kEmptyString) {
    delete user_id_;
  }
  if (user_id) {
    set_has_user_id();
    user_id_ = user_id;
  } else {
    clear_has_user_id();
    user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// LogoutRsp

// optional uint32 ret = 2;
inline bool LogoutRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LogoutRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LogoutRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LogoutRsp::clear_ret() {
  ret_ = 0u;
  clear_has_ret();
}
inline ::google::protobuf::uint32 LogoutRsp::ret() const {
  return ret_;
}
inline void LogoutRsp::set_ret(::google::protobuf::uint32 value) {
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// AddFriendReq

// optional .ssp.MsgHeader header = 1;
inline bool AddFriendReq::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AddFriendReq::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AddFriendReq::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AddFriendReq::clear_header() {
  if (header_ != NULL) header_->::ssp::MsgHeader::Clear();
  clear_has_header();
}
inline const ::ssp::MsgHeader& AddFriendReq::header() const {
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::ssp::MsgHeader* AddFriendReq::mutable_header() {
  set_has_header();
  if (header_ == NULL) header_ = new ::ssp::MsgHeader;
  return header_;
}
inline ::ssp::MsgHeader* AddFriendReq::release_header() {
  clear_has_header();
  ::ssp::MsgHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline void AddFriendReq::set_allocated_header(::ssp::MsgHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
}

// optional uint32 user_id = 2;
inline bool AddFriendReq::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AddFriendReq::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AddFriendReq::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AddFriendReq::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 AddFriendReq::user_id() const {
  return user_id_;
}
inline void AddFriendReq::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
}

// optional uint32 other_id = 3;
inline bool AddFriendReq::has_other_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AddFriendReq::set_has_other_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AddFriendReq::clear_has_other_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AddFriendReq::clear_other_id() {
  other_id_ = 0u;
  clear_has_other_id();
}
inline ::google::protobuf::uint32 AddFriendReq::other_id() const {
  return other_id_;
}
inline void AddFriendReq::set_other_id(::google::protobuf::uint32 value) {
  set_has_other_id();
  other_id_ = value;
}

// -------------------------------------------------------------------

// AddFriendRsp

// optional .ssp.MsgHeader header = 1;
inline bool AddFriendRsp::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AddFriendRsp::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AddFriendRsp::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AddFriendRsp::clear_header() {
  if (header_ != NULL) header_->::ssp::MsgHeader::Clear();
  clear_has_header();
}
inline const ::ssp::MsgHeader& AddFriendRsp::header() const {
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::ssp::MsgHeader* AddFriendRsp::mutable_header() {
  set_has_header();
  if (header_ == NULL) header_ = new ::ssp::MsgHeader;
  return header_;
}
inline ::ssp::MsgHeader* AddFriendRsp::release_header() {
  clear_has_header();
  ::ssp::MsgHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline void AddFriendRsp::set_allocated_header(::ssp::MsgHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
}

// optional uint32 ret = 2;
inline bool AddFriendRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AddFriendRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AddFriendRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AddFriendRsp::clear_ret() {
  ret_ = 0u;
  clear_has_ret();
}
inline ::google::protobuf::uint32 AddFriendRsp::ret() const {
  return ret_;
}
inline void AddFriendRsp::set_ret(::google::protobuf::uint32 value) {
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// DelFriendReq

// optional .ssp.MsgHeader header = 1;
inline bool DelFriendReq::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DelFriendReq::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DelFriendReq::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DelFriendReq::clear_header() {
  if (header_ != NULL) header_->::ssp::MsgHeader::Clear();
  clear_has_header();
}
inline const ::ssp::MsgHeader& DelFriendReq::header() const {
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::ssp::MsgHeader* DelFriendReq::mutable_header() {
  set_has_header();
  if (header_ == NULL) header_ = new ::ssp::MsgHeader;
  return header_;
}
inline ::ssp::MsgHeader* DelFriendReq::release_header() {
  clear_has_header();
  ::ssp::MsgHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline void DelFriendReq::set_allocated_header(::ssp::MsgHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
}

// optional uint32 user_id = 2;
inline bool DelFriendReq::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DelFriendReq::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DelFriendReq::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DelFriendReq::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 DelFriendReq::user_id() const {
  return user_id_;
}
inline void DelFriendReq::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
}

// optional uint32 other_id = 3;
inline bool DelFriendReq::has_other_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DelFriendReq::set_has_other_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DelFriendReq::clear_has_other_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DelFriendReq::clear_other_id() {
  other_id_ = 0u;
  clear_has_other_id();
}
inline ::google::protobuf::uint32 DelFriendReq::other_id() const {
  return other_id_;
}
inline void DelFriendReq::set_other_id(::google::protobuf::uint32 value) {
  set_has_other_id();
  other_id_ = value;
}

// -------------------------------------------------------------------

// DelFriendRsp

// optional .ssp.MsgHeader header = 1;
inline bool DelFriendRsp::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DelFriendRsp::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DelFriendRsp::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DelFriendRsp::clear_header() {
  if (header_ != NULL) header_->::ssp::MsgHeader::Clear();
  clear_has_header();
}
inline const ::ssp::MsgHeader& DelFriendRsp::header() const {
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::ssp::MsgHeader* DelFriendRsp::mutable_header() {
  set_has_header();
  if (header_ == NULL) header_ = new ::ssp::MsgHeader;
  return header_;
}
inline ::ssp::MsgHeader* DelFriendRsp::release_header() {
  clear_has_header();
  ::ssp::MsgHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline void DelFriendRsp::set_allocated_header(::ssp::MsgHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
}

// optional uint32 ret = 2;
inline bool DelFriendRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DelFriendRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DelFriendRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DelFriendRsp::clear_ret() {
  ret_ = 0u;
  clear_has_ret();
}
inline ::google::protobuf::uint32 DelFriendRsp::ret() const {
  return ret_;
}
inline void DelFriendRsp::set_ret(::google::protobuf::uint32 value) {
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// PublishMessageReq

// optional .ssp.MsgHeader header = 1;
inline bool PublishMessageReq::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PublishMessageReq::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PublishMessageReq::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PublishMessageReq::clear_header() {
  if (header_ != NULL) header_->::ssp::MsgHeader::Clear();
  clear_has_header();
}
inline const ::ssp::MsgHeader& PublishMessageReq::header() const {
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::ssp::MsgHeader* PublishMessageReq::mutable_header() {
  set_has_header();
  if (header_ == NULL) header_ = new ::ssp::MsgHeader;
  return header_;
}
inline ::ssp::MsgHeader* PublishMessageReq::release_header() {
  clear_has_header();
  ::ssp::MsgHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline void PublishMessageReq::set_allocated_header(::ssp::MsgHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
}

// optional uint32 user_id = 2;
inline bool PublishMessageReq::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PublishMessageReq::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PublishMessageReq::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PublishMessageReq::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 PublishMessageReq::user_id() const {
  return user_id_;
}
inline void PublishMessageReq::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
}

// optional string content = 3;
inline bool PublishMessageReq::has_content() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PublishMessageReq::set_has_content() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PublishMessageReq::clear_has_content() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PublishMessageReq::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& PublishMessageReq::content() const {
  return *content_;
}
inline void PublishMessageReq::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void PublishMessageReq::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void PublishMessageReq::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PublishMessageReq::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* PublishMessageReq::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PublishMessageReq::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// PublishMessageRsp

// optional .ssp.MsgHeader header = 1;
inline bool PublishMessageRsp::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PublishMessageRsp::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PublishMessageRsp::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PublishMessageRsp::clear_header() {
  if (header_ != NULL) header_->::ssp::MsgHeader::Clear();
  clear_has_header();
}
inline const ::ssp::MsgHeader& PublishMessageRsp::header() const {
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::ssp::MsgHeader* PublishMessageRsp::mutable_header() {
  set_has_header();
  if (header_ == NULL) header_ = new ::ssp::MsgHeader;
  return header_;
}
inline ::ssp::MsgHeader* PublishMessageRsp::release_header() {
  clear_has_header();
  ::ssp::MsgHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline void PublishMessageRsp::set_allocated_header(::ssp::MsgHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
}

// optional uint32 ret = 2;
inline bool PublishMessageRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PublishMessageRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PublishMessageRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PublishMessageRsp::clear_ret() {
  ret_ = 0u;
  clear_has_ret();
}
inline ::google::protobuf::uint32 PublishMessageRsp::ret() const {
  return ret_;
}
inline void PublishMessageRsp::set_ret(::google::protobuf::uint32 value) {
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// GetMessageListReq

// optional .ssp.MsgHeader header = 1;
inline bool GetMessageListReq::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetMessageListReq::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetMessageListReq::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetMessageListReq::clear_header() {
  if (header_ != NULL) header_->::ssp::MsgHeader::Clear();
  clear_has_header();
}
inline const ::ssp::MsgHeader& GetMessageListReq::header() const {
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::ssp::MsgHeader* GetMessageListReq::mutable_header() {
  set_has_header();
  if (header_ == NULL) header_ = new ::ssp::MsgHeader;
  return header_;
}
inline ::ssp::MsgHeader* GetMessageListReq::release_header() {
  clear_has_header();
  ::ssp::MsgHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline void GetMessageListReq::set_allocated_header(::ssp::MsgHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
}

// optional uint32 user_id = 2;
inline bool GetMessageListReq::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetMessageListReq::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetMessageListReq::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetMessageListReq::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 GetMessageListReq::user_id() const {
  return user_id_;
}
inline void GetMessageListReq::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
}

// -------------------------------------------------------------------

// MessageItem

// optional uint32 publisher_id = 1;
inline bool MessageItem::has_publisher_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MessageItem::set_has_publisher_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MessageItem::clear_has_publisher_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MessageItem::clear_publisher_id() {
  publisher_id_ = 0u;
  clear_has_publisher_id();
}
inline ::google::protobuf::uint32 MessageItem::publisher_id() const {
  return publisher_id_;
}
inline void MessageItem::set_publisher_id(::google::protobuf::uint32 value) {
  set_has_publisher_id();
  publisher_id_ = value;
}

// optional uint32 publish_time = 2;
inline bool MessageItem::has_publish_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MessageItem::set_has_publish_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MessageItem::clear_has_publish_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MessageItem::clear_publish_time() {
  publish_time_ = 0u;
  clear_has_publish_time();
}
inline ::google::protobuf::uint32 MessageItem::publish_time() const {
  return publish_time_;
}
inline void MessageItem::set_publish_time(::google::protobuf::uint32 value) {
  set_has_publish_time();
  publish_time_ = value;
}

// optional string content = 3;
inline bool MessageItem::has_content() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MessageItem::set_has_content() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MessageItem::clear_has_content() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MessageItem::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& MessageItem::content() const {
  return *content_;
}
inline void MessageItem::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void MessageItem::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void MessageItem::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MessageItem::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* MessageItem::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MessageItem::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// GetMessageListRsp

// optional .ssp.MsgHeader header = 1;
inline bool GetMessageListRsp::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetMessageListRsp::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetMessageListRsp::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetMessageListRsp::clear_header() {
  if (header_ != NULL) header_->::ssp::MsgHeader::Clear();
  clear_has_header();
}
inline const ::ssp::MsgHeader& GetMessageListRsp::header() const {
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::ssp::MsgHeader* GetMessageListRsp::mutable_header() {
  set_has_header();
  if (header_ == NULL) header_ = new ::ssp::MsgHeader;
  return header_;
}
inline ::ssp::MsgHeader* GetMessageListRsp::release_header() {
  clear_has_header();
  ::ssp::MsgHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline void GetMessageListRsp::set_allocated_header(::ssp::MsgHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
}

// optional uint32 ret = 2;
inline bool GetMessageListRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetMessageListRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetMessageListRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetMessageListRsp::clear_ret() {
  ret_ = 0u;
  clear_has_ret();
}
inline ::google::protobuf::uint32 GetMessageListRsp::ret() const {
  return ret_;
}
inline void GetMessageListRsp::set_ret(::google::protobuf::uint32 value) {
  set_has_ret();
  ret_ = value;
}

// repeated .ssp.MessageItem message_list = 3;
inline int GetMessageListRsp::message_list_size() const {
  return message_list_.size();
}
inline void GetMessageListRsp::clear_message_list() {
  message_list_.Clear();
}
inline const ::ssp::MessageItem& GetMessageListRsp::message_list(int index) const {
  return message_list_.Get(index);
}
inline ::ssp::MessageItem* GetMessageListRsp::mutable_message_list(int index) {
  return message_list_.Mutable(index);
}
inline ::ssp::MessageItem* GetMessageListRsp::add_message_list() {
  return message_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ssp::MessageItem >&
GetMessageListRsp::message_list() const {
  return message_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::ssp::MessageItem >*
GetMessageListRsp::mutable_message_list() {
  return &message_list_;
}

// -------------------------------------------------------------------

// GetPhotoReq

// optional .ssp.MsgHeader header = 1;
inline bool GetPhotoReq::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetPhotoReq::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetPhotoReq::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetPhotoReq::clear_header() {
  if (header_ != NULL) header_->::ssp::MsgHeader::Clear();
  clear_has_header();
}
inline const ::ssp::MsgHeader& GetPhotoReq::header() const {
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::ssp::MsgHeader* GetPhotoReq::mutable_header() {
  set_has_header();
  if (header_ == NULL) header_ = new ::ssp::MsgHeader;
  return header_;
}
inline ::ssp::MsgHeader* GetPhotoReq::release_header() {
  clear_has_header();
  ::ssp::MsgHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline void GetPhotoReq::set_allocated_header(::ssp::MsgHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
}

// optional uint32 user_id = 2;
inline bool GetPhotoReq::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetPhotoReq::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetPhotoReq::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetPhotoReq::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 GetPhotoReq::user_id() const {
  return user_id_;
}
inline void GetPhotoReq::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
}

// -------------------------------------------------------------------

// GetPhotoRsp

// optional .ssp.MsgHeader header = 1;
inline bool GetPhotoRsp::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetPhotoRsp::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetPhotoRsp::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetPhotoRsp::clear_header() {
  if (header_ != NULL) header_->::ssp::MsgHeader::Clear();
  clear_has_header();
}
inline const ::ssp::MsgHeader& GetPhotoRsp::header() const {
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::ssp::MsgHeader* GetPhotoRsp::mutable_header() {
  set_has_header();
  if (header_ == NULL) header_ = new ::ssp::MsgHeader;
  return header_;
}
inline ::ssp::MsgHeader* GetPhotoRsp::release_header() {
  clear_has_header();
  ::ssp::MsgHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline void GetPhotoRsp::set_allocated_header(::ssp::MsgHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
}

// optional uint32 ret = 2;
inline bool GetPhotoRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetPhotoRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetPhotoRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetPhotoRsp::clear_ret() {
  ret_ = 0u;
  clear_has_ret();
}
inline ::google::protobuf::uint32 GetPhotoRsp::ret() const {
  return ret_;
}
inline void GetPhotoRsp::set_ret(::google::protobuf::uint32 value) {
  set_has_ret();
  ret_ = value;
}

// optional uint32 last_publisher_id = 3;
inline bool GetPhotoRsp::has_last_publisher_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GetPhotoRsp::set_has_last_publisher_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GetPhotoRsp::clear_has_last_publisher_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GetPhotoRsp::clear_last_publisher_id() {
  last_publisher_id_ = 0u;
  clear_has_last_publisher_id();
}
inline ::google::protobuf::uint32 GetPhotoRsp::last_publisher_id() const {
  return last_publisher_id_;
}
inline void GetPhotoRsp::set_last_publisher_id(::google::protobuf::uint32 value) {
  set_has_last_publisher_id();
  last_publisher_id_ = value;
}

// optional string last_publish_name = 4;
inline bool GetPhotoRsp::has_last_publish_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GetPhotoRsp::set_has_last_publish_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GetPhotoRsp::clear_has_last_publish_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GetPhotoRsp::clear_last_publish_name() {
  if (last_publish_name_ != &::google::protobuf::internal::kEmptyString) {
    last_publish_name_->clear();
  }
  clear_has_last_publish_name();
}
inline const ::std::string& GetPhotoRsp::last_publish_name() const {
  return *last_publish_name_;
}
inline void GetPhotoRsp::set_last_publish_name(const ::std::string& value) {
  set_has_last_publish_name();
  if (last_publish_name_ == &::google::protobuf::internal::kEmptyString) {
    last_publish_name_ = new ::std::string;
  }
  last_publish_name_->assign(value);
}
inline void GetPhotoRsp::set_last_publish_name(const char* value) {
  set_has_last_publish_name();
  if (last_publish_name_ == &::google::protobuf::internal::kEmptyString) {
    last_publish_name_ = new ::std::string;
  }
  last_publish_name_->assign(value);
}
inline void GetPhotoRsp::set_last_publish_name(const char* value, size_t size) {
  set_has_last_publish_name();
  if (last_publish_name_ == &::google::protobuf::internal::kEmptyString) {
    last_publish_name_ = new ::std::string;
  }
  last_publish_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetPhotoRsp::mutable_last_publish_name() {
  set_has_last_publish_name();
  if (last_publish_name_ == &::google::protobuf::internal::kEmptyString) {
    last_publish_name_ = new ::std::string;
  }
  return last_publish_name_;
}
inline ::std::string* GetPhotoRsp::release_last_publish_name() {
  clear_has_last_publish_name();
  if (last_publish_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = last_publish_name_;
    last_publish_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GetPhotoRsp::set_allocated_last_publish_name(::std::string* last_publish_name) {
  if (last_publish_name_ != &::google::protobuf::internal::kEmptyString) {
    delete last_publish_name_;
  }
  if (last_publish_name) {
    set_has_last_publish_name();
    last_publish_name_ = last_publish_name;
  } else {
    clear_has_last_publish_name();
    last_publish_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CommonReq

// optional .ssp.MsgHeader header = 1;
inline bool CommonReq::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CommonReq::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CommonReq::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CommonReq::clear_header() {
  if (header_ != NULL) header_->::ssp::MsgHeader::Clear();
  clear_has_header();
}
inline const ::ssp::MsgHeader& CommonReq::header() const {
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::ssp::MsgHeader* CommonReq::mutable_header() {
  set_has_header();
  if (header_ == NULL) header_ = new ::ssp::MsgHeader;
  return header_;
}
inline ::ssp::MsgHeader* CommonReq::release_header() {
  clear_has_header();
  ::ssp::MsgHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline void CommonReq::set_allocated_header(::ssp::MsgHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
}

// optional .ssp.RegReq reg_req = 2;
inline bool CommonReq::has_reg_req() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CommonReq::set_has_reg_req() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CommonReq::clear_has_reg_req() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CommonReq::clear_reg_req() {
  if (reg_req_ != NULL) reg_req_->::ssp::RegReq::Clear();
  clear_has_reg_req();
}
inline const ::ssp::RegReq& CommonReq::reg_req() const {
  return reg_req_ != NULL ? *reg_req_ : *default_instance_->reg_req_;
}
inline ::ssp::RegReq* CommonReq::mutable_reg_req() {
  set_has_reg_req();
  if (reg_req_ == NULL) reg_req_ = new ::ssp::RegReq;
  return reg_req_;
}
inline ::ssp::RegReq* CommonReq::release_reg_req() {
  clear_has_reg_req();
  ::ssp::RegReq* temp = reg_req_;
  reg_req_ = NULL;
  return temp;
}
inline void CommonReq::set_allocated_reg_req(::ssp::RegReq* reg_req) {
  delete reg_req_;
  reg_req_ = reg_req;
  if (reg_req) {
    set_has_reg_req();
  } else {
    clear_has_reg_req();
  }
}

// optional .ssp.LoginReq login_req = 3;
inline bool CommonReq::has_login_req() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CommonReq::set_has_login_req() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CommonReq::clear_has_login_req() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CommonReq::clear_login_req() {
  if (login_req_ != NULL) login_req_->::ssp::LoginReq::Clear();
  clear_has_login_req();
}
inline const ::ssp::LoginReq& CommonReq::login_req() const {
  return login_req_ != NULL ? *login_req_ : *default_instance_->login_req_;
}
inline ::ssp::LoginReq* CommonReq::mutable_login_req() {
  set_has_login_req();
  if (login_req_ == NULL) login_req_ = new ::ssp::LoginReq;
  return login_req_;
}
inline ::ssp::LoginReq* CommonReq::release_login_req() {
  clear_has_login_req();
  ::ssp::LoginReq* temp = login_req_;
  login_req_ = NULL;
  return temp;
}
inline void CommonReq::set_allocated_login_req(::ssp::LoginReq* login_req) {
  delete login_req_;
  login_req_ = login_req;
  if (login_req) {
    set_has_login_req();
  } else {
    clear_has_login_req();
  }
}

// optional .ssp.LogoutReq logout_req = 4;
inline bool CommonReq::has_logout_req() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CommonReq::set_has_logout_req() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CommonReq::clear_has_logout_req() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CommonReq::clear_logout_req() {
  if (logout_req_ != NULL) logout_req_->::ssp::LogoutReq::Clear();
  clear_has_logout_req();
}
inline const ::ssp::LogoutReq& CommonReq::logout_req() const {
  return logout_req_ != NULL ? *logout_req_ : *default_instance_->logout_req_;
}
inline ::ssp::LogoutReq* CommonReq::mutable_logout_req() {
  set_has_logout_req();
  if (logout_req_ == NULL) logout_req_ = new ::ssp::LogoutReq;
  return logout_req_;
}
inline ::ssp::LogoutReq* CommonReq::release_logout_req() {
  clear_has_logout_req();
  ::ssp::LogoutReq* temp = logout_req_;
  logout_req_ = NULL;
  return temp;
}
inline void CommonReq::set_allocated_logout_req(::ssp::LogoutReq* logout_req) {
  delete logout_req_;
  logout_req_ = logout_req;
  if (logout_req) {
    set_has_logout_req();
  } else {
    clear_has_logout_req();
  }
}

// optional .ssp.AddFriendReq add_friend_req = 5;
inline bool CommonReq::has_add_friend_req() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CommonReq::set_has_add_friend_req() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CommonReq::clear_has_add_friend_req() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CommonReq::clear_add_friend_req() {
  if (add_friend_req_ != NULL) add_friend_req_->::ssp::AddFriendReq::Clear();
  clear_has_add_friend_req();
}
inline const ::ssp::AddFriendReq& CommonReq::add_friend_req() const {
  return add_friend_req_ != NULL ? *add_friend_req_ : *default_instance_->add_friend_req_;
}
inline ::ssp::AddFriendReq* CommonReq::mutable_add_friend_req() {
  set_has_add_friend_req();
  if (add_friend_req_ == NULL) add_friend_req_ = new ::ssp::AddFriendReq;
  return add_friend_req_;
}
inline ::ssp::AddFriendReq* CommonReq::release_add_friend_req() {
  clear_has_add_friend_req();
  ::ssp::AddFriendReq* temp = add_friend_req_;
  add_friend_req_ = NULL;
  return temp;
}
inline void CommonReq::set_allocated_add_friend_req(::ssp::AddFriendReq* add_friend_req) {
  delete add_friend_req_;
  add_friend_req_ = add_friend_req;
  if (add_friend_req) {
    set_has_add_friend_req();
  } else {
    clear_has_add_friend_req();
  }
}

// optional .ssp.DelFriendReq del_friend_req = 6;
inline bool CommonReq::has_del_friend_req() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CommonReq::set_has_del_friend_req() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CommonReq::clear_has_del_friend_req() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CommonReq::clear_del_friend_req() {
  if (del_friend_req_ != NULL) del_friend_req_->::ssp::DelFriendReq::Clear();
  clear_has_del_friend_req();
}
inline const ::ssp::DelFriendReq& CommonReq::del_friend_req() const {
  return del_friend_req_ != NULL ? *del_friend_req_ : *default_instance_->del_friend_req_;
}
inline ::ssp::DelFriendReq* CommonReq::mutable_del_friend_req() {
  set_has_del_friend_req();
  if (del_friend_req_ == NULL) del_friend_req_ = new ::ssp::DelFriendReq;
  return del_friend_req_;
}
inline ::ssp::DelFriendReq* CommonReq::release_del_friend_req() {
  clear_has_del_friend_req();
  ::ssp::DelFriendReq* temp = del_friend_req_;
  del_friend_req_ = NULL;
  return temp;
}
inline void CommonReq::set_allocated_del_friend_req(::ssp::DelFriendReq* del_friend_req) {
  delete del_friend_req_;
  del_friend_req_ = del_friend_req;
  if (del_friend_req) {
    set_has_del_friend_req();
  } else {
    clear_has_del_friend_req();
  }
}

// optional .ssp.GetPhotoReq get_photo_req = 7;
inline bool CommonReq::has_get_photo_req() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CommonReq::set_has_get_photo_req() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CommonReq::clear_has_get_photo_req() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CommonReq::clear_get_photo_req() {
  if (get_photo_req_ != NULL) get_photo_req_->::ssp::GetPhotoReq::Clear();
  clear_has_get_photo_req();
}
inline const ::ssp::GetPhotoReq& CommonReq::get_photo_req() const {
  return get_photo_req_ != NULL ? *get_photo_req_ : *default_instance_->get_photo_req_;
}
inline ::ssp::GetPhotoReq* CommonReq::mutable_get_photo_req() {
  set_has_get_photo_req();
  if (get_photo_req_ == NULL) get_photo_req_ = new ::ssp::GetPhotoReq;
  return get_photo_req_;
}
inline ::ssp::GetPhotoReq* CommonReq::release_get_photo_req() {
  clear_has_get_photo_req();
  ::ssp::GetPhotoReq* temp = get_photo_req_;
  get_photo_req_ = NULL;
  return temp;
}
inline void CommonReq::set_allocated_get_photo_req(::ssp::GetPhotoReq* get_photo_req) {
  delete get_photo_req_;
  get_photo_req_ = get_photo_req;
  if (get_photo_req) {
    set_has_get_photo_req();
  } else {
    clear_has_get_photo_req();
  }
}

// optional .ssp.GetMessageListReq get_message_list_req = 8;
inline bool CommonReq::has_get_message_list_req() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CommonReq::set_has_get_message_list_req() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CommonReq::clear_has_get_message_list_req() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CommonReq::clear_get_message_list_req() {
  if (get_message_list_req_ != NULL) get_message_list_req_->::ssp::GetMessageListReq::Clear();
  clear_has_get_message_list_req();
}
inline const ::ssp::GetMessageListReq& CommonReq::get_message_list_req() const {
  return get_message_list_req_ != NULL ? *get_message_list_req_ : *default_instance_->get_message_list_req_;
}
inline ::ssp::GetMessageListReq* CommonReq::mutable_get_message_list_req() {
  set_has_get_message_list_req();
  if (get_message_list_req_ == NULL) get_message_list_req_ = new ::ssp::GetMessageListReq;
  return get_message_list_req_;
}
inline ::ssp::GetMessageListReq* CommonReq::release_get_message_list_req() {
  clear_has_get_message_list_req();
  ::ssp::GetMessageListReq* temp = get_message_list_req_;
  get_message_list_req_ = NULL;
  return temp;
}
inline void CommonReq::set_allocated_get_message_list_req(::ssp::GetMessageListReq* get_message_list_req) {
  delete get_message_list_req_;
  get_message_list_req_ = get_message_list_req;
  if (get_message_list_req) {
    set_has_get_message_list_req();
  } else {
    clear_has_get_message_list_req();
  }
}

// optional .ssp.PublishMessageReq publish_message_req = 9;
inline bool CommonReq::has_publish_message_req() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CommonReq::set_has_publish_message_req() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CommonReq::clear_has_publish_message_req() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CommonReq::clear_publish_message_req() {
  if (publish_message_req_ != NULL) publish_message_req_->::ssp::PublishMessageReq::Clear();
  clear_has_publish_message_req();
}
inline const ::ssp::PublishMessageReq& CommonReq::publish_message_req() const {
  return publish_message_req_ != NULL ? *publish_message_req_ : *default_instance_->publish_message_req_;
}
inline ::ssp::PublishMessageReq* CommonReq::mutable_publish_message_req() {
  set_has_publish_message_req();
  if (publish_message_req_ == NULL) publish_message_req_ = new ::ssp::PublishMessageReq;
  return publish_message_req_;
}
inline ::ssp::PublishMessageReq* CommonReq::release_publish_message_req() {
  clear_has_publish_message_req();
  ::ssp::PublishMessageReq* temp = publish_message_req_;
  publish_message_req_ = NULL;
  return temp;
}
inline void CommonReq::set_allocated_publish_message_req(::ssp::PublishMessageReq* publish_message_req) {
  delete publish_message_req_;
  publish_message_req_ = publish_message_req;
  if (publish_message_req) {
    set_has_publish_message_req();
  } else {
    clear_has_publish_message_req();
  }
}

// -------------------------------------------------------------------

// CommonRsp

// optional .ssp.MsgHeader header = 1;
inline bool CommonRsp::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CommonRsp::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CommonRsp::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CommonRsp::clear_header() {
  if (header_ != NULL) header_->::ssp::MsgHeader::Clear();
  clear_has_header();
}
inline const ::ssp::MsgHeader& CommonRsp::header() const {
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::ssp::MsgHeader* CommonRsp::mutable_header() {
  set_has_header();
  if (header_ == NULL) header_ = new ::ssp::MsgHeader;
  return header_;
}
inline ::ssp::MsgHeader* CommonRsp::release_header() {
  clear_has_header();
  ::ssp::MsgHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline void CommonRsp::set_allocated_header(::ssp::MsgHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
}

// optional .ssp.RegRsp reg_rsp = 2;
inline bool CommonRsp::has_reg_rsp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CommonRsp::set_has_reg_rsp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CommonRsp::clear_has_reg_rsp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CommonRsp::clear_reg_rsp() {
  if (reg_rsp_ != NULL) reg_rsp_->::ssp::RegRsp::Clear();
  clear_has_reg_rsp();
}
inline const ::ssp::RegRsp& CommonRsp::reg_rsp() const {
  return reg_rsp_ != NULL ? *reg_rsp_ : *default_instance_->reg_rsp_;
}
inline ::ssp::RegRsp* CommonRsp::mutable_reg_rsp() {
  set_has_reg_rsp();
  if (reg_rsp_ == NULL) reg_rsp_ = new ::ssp::RegRsp;
  return reg_rsp_;
}
inline ::ssp::RegRsp* CommonRsp::release_reg_rsp() {
  clear_has_reg_rsp();
  ::ssp::RegRsp* temp = reg_rsp_;
  reg_rsp_ = NULL;
  return temp;
}
inline void CommonRsp::set_allocated_reg_rsp(::ssp::RegRsp* reg_rsp) {
  delete reg_rsp_;
  reg_rsp_ = reg_rsp;
  if (reg_rsp) {
    set_has_reg_rsp();
  } else {
    clear_has_reg_rsp();
  }
}

// optional .ssp.LoginRsp login_rsp = 3;
inline bool CommonRsp::has_login_rsp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CommonRsp::set_has_login_rsp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CommonRsp::clear_has_login_rsp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CommonRsp::clear_login_rsp() {
  if (login_rsp_ != NULL) login_rsp_->::ssp::LoginRsp::Clear();
  clear_has_login_rsp();
}
inline const ::ssp::LoginRsp& CommonRsp::login_rsp() const {
  return login_rsp_ != NULL ? *login_rsp_ : *default_instance_->login_rsp_;
}
inline ::ssp::LoginRsp* CommonRsp::mutable_login_rsp() {
  set_has_login_rsp();
  if (login_rsp_ == NULL) login_rsp_ = new ::ssp::LoginRsp;
  return login_rsp_;
}
inline ::ssp::LoginRsp* CommonRsp::release_login_rsp() {
  clear_has_login_rsp();
  ::ssp::LoginRsp* temp = login_rsp_;
  login_rsp_ = NULL;
  return temp;
}
inline void CommonRsp::set_allocated_login_rsp(::ssp::LoginRsp* login_rsp) {
  delete login_rsp_;
  login_rsp_ = login_rsp;
  if (login_rsp) {
    set_has_login_rsp();
  } else {
    clear_has_login_rsp();
  }
}

// optional .ssp.LogoutRsp logout_rsp = 4;
inline bool CommonRsp::has_logout_rsp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CommonRsp::set_has_logout_rsp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CommonRsp::clear_has_logout_rsp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CommonRsp::clear_logout_rsp() {
  if (logout_rsp_ != NULL) logout_rsp_->::ssp::LogoutRsp::Clear();
  clear_has_logout_rsp();
}
inline const ::ssp::LogoutRsp& CommonRsp::logout_rsp() const {
  return logout_rsp_ != NULL ? *logout_rsp_ : *default_instance_->logout_rsp_;
}
inline ::ssp::LogoutRsp* CommonRsp::mutable_logout_rsp() {
  set_has_logout_rsp();
  if (logout_rsp_ == NULL) logout_rsp_ = new ::ssp::LogoutRsp;
  return logout_rsp_;
}
inline ::ssp::LogoutRsp* CommonRsp::release_logout_rsp() {
  clear_has_logout_rsp();
  ::ssp::LogoutRsp* temp = logout_rsp_;
  logout_rsp_ = NULL;
  return temp;
}
inline void CommonRsp::set_allocated_logout_rsp(::ssp::LogoutRsp* logout_rsp) {
  delete logout_rsp_;
  logout_rsp_ = logout_rsp;
  if (logout_rsp) {
    set_has_logout_rsp();
  } else {
    clear_has_logout_rsp();
  }
}

// optional .ssp.AddFriendRsp add_friend_rsp = 5;
inline bool CommonRsp::has_add_friend_rsp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CommonRsp::set_has_add_friend_rsp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CommonRsp::clear_has_add_friend_rsp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CommonRsp::clear_add_friend_rsp() {
  if (add_friend_rsp_ != NULL) add_friend_rsp_->::ssp::AddFriendRsp::Clear();
  clear_has_add_friend_rsp();
}
inline const ::ssp::AddFriendRsp& CommonRsp::add_friend_rsp() const {
  return add_friend_rsp_ != NULL ? *add_friend_rsp_ : *default_instance_->add_friend_rsp_;
}
inline ::ssp::AddFriendRsp* CommonRsp::mutable_add_friend_rsp() {
  set_has_add_friend_rsp();
  if (add_friend_rsp_ == NULL) add_friend_rsp_ = new ::ssp::AddFriendRsp;
  return add_friend_rsp_;
}
inline ::ssp::AddFriendRsp* CommonRsp::release_add_friend_rsp() {
  clear_has_add_friend_rsp();
  ::ssp::AddFriendRsp* temp = add_friend_rsp_;
  add_friend_rsp_ = NULL;
  return temp;
}
inline void CommonRsp::set_allocated_add_friend_rsp(::ssp::AddFriendRsp* add_friend_rsp) {
  delete add_friend_rsp_;
  add_friend_rsp_ = add_friend_rsp;
  if (add_friend_rsp) {
    set_has_add_friend_rsp();
  } else {
    clear_has_add_friend_rsp();
  }
}

// optional .ssp.DelFriendRsp del_friend_rsp = 6;
inline bool CommonRsp::has_del_friend_rsp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CommonRsp::set_has_del_friend_rsp() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CommonRsp::clear_has_del_friend_rsp() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CommonRsp::clear_del_friend_rsp() {
  if (del_friend_rsp_ != NULL) del_friend_rsp_->::ssp::DelFriendRsp::Clear();
  clear_has_del_friend_rsp();
}
inline const ::ssp::DelFriendRsp& CommonRsp::del_friend_rsp() const {
  return del_friend_rsp_ != NULL ? *del_friend_rsp_ : *default_instance_->del_friend_rsp_;
}
inline ::ssp::DelFriendRsp* CommonRsp::mutable_del_friend_rsp() {
  set_has_del_friend_rsp();
  if (del_friend_rsp_ == NULL) del_friend_rsp_ = new ::ssp::DelFriendRsp;
  return del_friend_rsp_;
}
inline ::ssp::DelFriendRsp* CommonRsp::release_del_friend_rsp() {
  clear_has_del_friend_rsp();
  ::ssp::DelFriendRsp* temp = del_friend_rsp_;
  del_friend_rsp_ = NULL;
  return temp;
}
inline void CommonRsp::set_allocated_del_friend_rsp(::ssp::DelFriendRsp* del_friend_rsp) {
  delete del_friend_rsp_;
  del_friend_rsp_ = del_friend_rsp;
  if (del_friend_rsp) {
    set_has_del_friend_rsp();
  } else {
    clear_has_del_friend_rsp();
  }
}

// optional .ssp.GetPhotoRsp get_photo_rsp = 7;
inline bool CommonRsp::has_get_photo_rsp() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CommonRsp::set_has_get_photo_rsp() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CommonRsp::clear_has_get_photo_rsp() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CommonRsp::clear_get_photo_rsp() {
  if (get_photo_rsp_ != NULL) get_photo_rsp_->::ssp::GetPhotoRsp::Clear();
  clear_has_get_photo_rsp();
}
inline const ::ssp::GetPhotoRsp& CommonRsp::get_photo_rsp() const {
  return get_photo_rsp_ != NULL ? *get_photo_rsp_ : *default_instance_->get_photo_rsp_;
}
inline ::ssp::GetPhotoRsp* CommonRsp::mutable_get_photo_rsp() {
  set_has_get_photo_rsp();
  if (get_photo_rsp_ == NULL) get_photo_rsp_ = new ::ssp::GetPhotoRsp;
  return get_photo_rsp_;
}
inline ::ssp::GetPhotoRsp* CommonRsp::release_get_photo_rsp() {
  clear_has_get_photo_rsp();
  ::ssp::GetPhotoRsp* temp = get_photo_rsp_;
  get_photo_rsp_ = NULL;
  return temp;
}
inline void CommonRsp::set_allocated_get_photo_rsp(::ssp::GetPhotoRsp* get_photo_rsp) {
  delete get_photo_rsp_;
  get_photo_rsp_ = get_photo_rsp;
  if (get_photo_rsp) {
    set_has_get_photo_rsp();
  } else {
    clear_has_get_photo_rsp();
  }
}

// optional .ssp.GetMessageListRsp get_message_list_rsp = 8;
inline bool CommonRsp::has_get_message_list_rsp() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CommonRsp::set_has_get_message_list_rsp() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CommonRsp::clear_has_get_message_list_rsp() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CommonRsp::clear_get_message_list_rsp() {
  if (get_message_list_rsp_ != NULL) get_message_list_rsp_->::ssp::GetMessageListRsp::Clear();
  clear_has_get_message_list_rsp();
}
inline const ::ssp::GetMessageListRsp& CommonRsp::get_message_list_rsp() const {
  return get_message_list_rsp_ != NULL ? *get_message_list_rsp_ : *default_instance_->get_message_list_rsp_;
}
inline ::ssp::GetMessageListRsp* CommonRsp::mutable_get_message_list_rsp() {
  set_has_get_message_list_rsp();
  if (get_message_list_rsp_ == NULL) get_message_list_rsp_ = new ::ssp::GetMessageListRsp;
  return get_message_list_rsp_;
}
inline ::ssp::GetMessageListRsp* CommonRsp::release_get_message_list_rsp() {
  clear_has_get_message_list_rsp();
  ::ssp::GetMessageListRsp* temp = get_message_list_rsp_;
  get_message_list_rsp_ = NULL;
  return temp;
}
inline void CommonRsp::set_allocated_get_message_list_rsp(::ssp::GetMessageListRsp* get_message_list_rsp) {
  delete get_message_list_rsp_;
  get_message_list_rsp_ = get_message_list_rsp;
  if (get_message_list_rsp) {
    set_has_get_message_list_rsp();
  } else {
    clear_has_get_message_list_rsp();
  }
}

// optional .ssp.PublishMessageRsp publish_message_rsp = 9;
inline bool CommonRsp::has_publish_message_rsp() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CommonRsp::set_has_publish_message_rsp() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CommonRsp::clear_has_publish_message_rsp() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CommonRsp::clear_publish_message_rsp() {
  if (publish_message_rsp_ != NULL) publish_message_rsp_->::ssp::PublishMessageRsp::Clear();
  clear_has_publish_message_rsp();
}
inline const ::ssp::PublishMessageRsp& CommonRsp::publish_message_rsp() const {
  return publish_message_rsp_ != NULL ? *publish_message_rsp_ : *default_instance_->publish_message_rsp_;
}
inline ::ssp::PublishMessageRsp* CommonRsp::mutable_publish_message_rsp() {
  set_has_publish_message_rsp();
  if (publish_message_rsp_ == NULL) publish_message_rsp_ = new ::ssp::PublishMessageRsp;
  return publish_message_rsp_;
}
inline ::ssp::PublishMessageRsp* CommonRsp::release_publish_message_rsp() {
  clear_has_publish_message_rsp();
  ::ssp::PublishMessageRsp* temp = publish_message_rsp_;
  publish_message_rsp_ = NULL;
  return temp;
}
inline void CommonRsp::set_allocated_publish_message_rsp(::ssp::PublishMessageRsp* publish_message_rsp) {
  delete publish_message_rsp_;
  publish_message_rsp_ = publish_message_rsp;
  if (publish_message_rsp) {
    set_has_publish_message_rsp();
  } else {
    clear_has_publish_message_rsp();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ssp

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_message_5fdefine_2eproto__INCLUDED
