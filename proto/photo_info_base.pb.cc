// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: photo_info_base.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "photo_info_base.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ssp {

namespace {

const ::google::protobuf::Descriptor* PhotoInfoBase_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PhotoInfoBase_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_photo_5finfo_5fbase_2eproto() {
  protobuf_AddDesc_photo_5finfo_5fbase_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "photo_info_base.proto");
  GOOGLE_CHECK(file != NULL);
  PhotoInfoBase_descriptor_ = file->message_type(0);
  static const int PhotoInfoBase_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhotoInfoBase, ver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhotoInfoBase, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhotoInfoBase, last_publisher_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhotoInfoBase, last_publish_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhotoInfoBase, last_publish_message_id_),
  };
  PhotoInfoBase_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PhotoInfoBase_descriptor_,
      PhotoInfoBase::default_instance_,
      PhotoInfoBase_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhotoInfoBase, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhotoInfoBase, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PhotoInfoBase));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_photo_5finfo_5fbase_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PhotoInfoBase_descriptor_, &PhotoInfoBase::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_photo_5finfo_5fbase_2eproto() {
  delete PhotoInfoBase::default_instance_;
  delete PhotoInfoBase_reflection_;
}

void protobuf_AddDesc_photo_5finfo_5fbase_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025photo_info_base.proto\022\003ssp\"\201\001\n\rPhotoIn"
    "foBase\022\013\n\003ver\030\001 \001(\r\022\017\n\007user_id\030\002 \001(\r\022\026\n\016"
    "last_publisher\030\003 \001(\r\022\031\n\021last_publish_tim"
    "e\030\004 \001(\r\022\037\n\027last_publish_message_id\030\005 \001(\r", 160);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "photo_info_base.proto", &protobuf_RegisterTypes);
  PhotoInfoBase::default_instance_ = new PhotoInfoBase();
  PhotoInfoBase::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_photo_5finfo_5fbase_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_photo_5finfo_5fbase_2eproto {
  StaticDescriptorInitializer_photo_5finfo_5fbase_2eproto() {
    protobuf_AddDesc_photo_5finfo_5fbase_2eproto();
  }
} static_descriptor_initializer_photo_5finfo_5fbase_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int PhotoInfoBase::kVerFieldNumber;
const int PhotoInfoBase::kUserIdFieldNumber;
const int PhotoInfoBase::kLastPublisherFieldNumber;
const int PhotoInfoBase::kLastPublishTimeFieldNumber;
const int PhotoInfoBase::kLastPublishMessageIdFieldNumber;
#endif  // !_MSC_VER

PhotoInfoBase::PhotoInfoBase()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PhotoInfoBase::InitAsDefaultInstance() {
}

PhotoInfoBase::PhotoInfoBase(const PhotoInfoBase& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PhotoInfoBase::SharedCtor() {
  _cached_size_ = 0;
  ver_ = 0u;
  user_id_ = 0u;
  last_publisher_ = 0u;
  last_publish_time_ = 0u;
  last_publish_message_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PhotoInfoBase::~PhotoInfoBase() {
  SharedDtor();
}

void PhotoInfoBase::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PhotoInfoBase::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PhotoInfoBase::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PhotoInfoBase_descriptor_;
}

const PhotoInfoBase& PhotoInfoBase::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_photo_5finfo_5fbase_2eproto();
  return *default_instance_;
}

PhotoInfoBase* PhotoInfoBase::default_instance_ = NULL;

PhotoInfoBase* PhotoInfoBase::New() const {
  return new PhotoInfoBase;
}

void PhotoInfoBase::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ver_ = 0u;
    user_id_ = 0u;
    last_publisher_ = 0u;
    last_publish_time_ = 0u;
    last_publish_message_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PhotoInfoBase::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ver = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ver_)));
          set_has_ver();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // optional uint32 user_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_last_publisher;
        break;
      }

      // optional uint32 last_publisher = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_publisher:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_publisher_)));
          set_has_last_publisher();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_last_publish_time;
        break;
      }

      // optional uint32 last_publish_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_publish_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_publish_time_)));
          set_has_last_publish_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_last_publish_message_id;
        break;
      }

      // optional uint32 last_publish_message_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_publish_message_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_publish_message_id_)));
          set_has_last_publish_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PhotoInfoBase::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 ver = 1;
  if (has_ver()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ver(), output);
  }

  // optional uint32 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->user_id(), output);
  }

  // optional uint32 last_publisher = 3;
  if (has_last_publisher()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->last_publisher(), output);
  }

  // optional uint32 last_publish_time = 4;
  if (has_last_publish_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->last_publish_time(), output);
  }

  // optional uint32 last_publish_message_id = 5;
  if (has_last_publish_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->last_publish_message_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PhotoInfoBase::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 ver = 1;
  if (has_ver()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ver(), target);
  }

  // optional uint32 user_id = 2;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->user_id(), target);
  }

  // optional uint32 last_publisher = 3;
  if (has_last_publisher()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->last_publisher(), target);
  }

  // optional uint32 last_publish_time = 4;
  if (has_last_publish_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->last_publish_time(), target);
  }

  // optional uint32 last_publish_message_id = 5;
  if (has_last_publish_message_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->last_publish_message_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PhotoInfoBase::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ver = 1;
    if (has_ver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ver());
    }

    // optional uint32 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // optional uint32 last_publisher = 3;
    if (has_last_publisher()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_publisher());
    }

    // optional uint32 last_publish_time = 4;
    if (has_last_publish_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_publish_time());
    }

    // optional uint32 last_publish_message_id = 5;
    if (has_last_publish_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_publish_message_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PhotoInfoBase::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PhotoInfoBase* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PhotoInfoBase*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PhotoInfoBase::MergeFrom(const PhotoInfoBase& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ver()) {
      set_ver(from.ver());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_last_publisher()) {
      set_last_publisher(from.last_publisher());
    }
    if (from.has_last_publish_time()) {
      set_last_publish_time(from.last_publish_time());
    }
    if (from.has_last_publish_message_id()) {
      set_last_publish_message_id(from.last_publish_message_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PhotoInfoBase::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PhotoInfoBase::CopyFrom(const PhotoInfoBase& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PhotoInfoBase::IsInitialized() const {

  return true;
}

void PhotoInfoBase::Swap(PhotoInfoBase* other) {
  if (other != this) {
    std::swap(ver_, other->ver_);
    std::swap(user_id_, other->user_id_);
    std::swap(last_publisher_, other->last_publisher_);
    std::swap(last_publish_time_, other->last_publish_time_);
    std::swap(last_publish_message_id_, other->last_publish_message_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PhotoInfoBase::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PhotoInfoBase_descriptor_;
  metadata.reflection = PhotoInfoBase_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ssp

// @@protoc_insertion_point(global_scope)
